<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>C1.Win.C1Input.4</name>
  </assembly>
  <members>
    <member name="T:C1.Win.C1Input.UIStringsItemEventHandler">
      <summary>
        <see cref="T:C1.Win.C1Input.UIStrings" />項目関連イベントのハンドラを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Input.UIStringsItemEventArgs">
      <summary>
        <see cref="T:C1.Win.C1Input.UIStrings" />項目関連イベントにイベントデータを提供します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.UIStringsItemEventArgs.Key">
      <summary>追加または変更する項目のキーを取得します。</summary>
      <value>キー。</value>
    </member>
    <member name="P:C1.Win.C1Input.UIStringsItemEventArgs.Value">
      <summary>文字列値を取得します。</summary>
      <value>値。</value>
    </member>
    <member name="P:C1.Win.C1Input.UIStringsItemEventArgs.IsDefault">
      <summary>このインスタンスがデフォルトかどうかを示す値を取得します。</summary>
      <value>
        このインスタンスがデフォルトの場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </value>
    </member>
    <member name="P:C1.Win.C1Input.UIStringsItemEventArgs.Description">
      <summary>説明を取得します。</summary>
      <value>説明。</value>
    </member>
    <member name="T:C1.Win.C1Input.UIStrings">
      <summary>エンドユーザーに表示される UI 文字列のコレクションを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.Add(System.Object,System.Int32,System.String,System.String)">
      <summary>順序を示す文字列をコレクションに追加します。</summary>
      <param name="key">文字列のキー。</param>
      <param name="ordinal">文字列の順序。</param>
      <param name="value">文字列。</param>
      <param name="description">文字列の説明。</param>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.Add(System.Object,System.String,System.String)">
      <summary>アルファベット順にコレクションに文字列を追加します。</summary>
      <param name="key">文字列のキー。</param>
      <param name="value">文字列。</param>
      <param name="description">文字列の説明。</param>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.AddInOrder(System.Object,System.String,System.String)">
      <summary>順序を維持しながらコレクションに文字列を追加します。</summary>
      <param name="key">文字列のキー。</param>
      <param name="value">文字列。</param>
      <param name="description">文字列の説明。</param>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.Reset">
      <summary>コレクションのすべての文字列をデフォルト値に設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.ShouldSerialize">
      <summary>現在のコレクションの中にデフォルト値以外の文字列が あるかどうかを示します。</summary>
      <returns>
        デフォルト値以外の文字列がある場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.IsDefault(System.Object)">
      <summary>コレクション内の文字列がデフォルト値かどうかをテストします。</summary>
      <param name="key">テストする文字列のキー。</param>
      <returns>
        文字列がデフォルト値の場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.GetDescription(System.Object)">
      <summary>文字列の説明を返します。</summary>
      <param name="key">説明の取得元の文字列のキー。</param>
      <returns>文字列の説明</returns>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.Reset(System.Object)">
      <summary>文字列をデフォルト値にリセットします。</summary>
      <param name="key">リセットする文字列のキー。</param>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.GetKeyAt(System.Int32)">
      <summary>指定されたインデックスを持つ項目のキーを返します。</summary>
      <param name="index">項目のインデックス。</param>
      <returns>項目のキー。</returns>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.GetValueAt(System.Int32)">
      <summary>インデックスに基づいて文字列を取得します。</summary>
      <param name="index">文字列のインデックス。</param>
      <returns>文字列。</returns>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.SetValueAt(System.Int32,System.String)">
      <summary>指定されたインデックスを持つ文字列の値を設定します。</summary>
      <param name="index">文字列のインデックス。</param>
      <param name="value">新しい文字列値。</param>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.OnItemAdded(C1.Win.C1Input.UIStringsItemEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.UIStrings.ItemAdded" />イベントを発生させます。
      </summary>
      <param name="e">イベントデータ。</param>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.OnItemChanged(C1.Win.C1Input.UIStringsItemEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.UIStrings.ItemChanged" />イベントを発生させます。
      </summary>
      <param name="e">イベントデータ。</param>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.OnCollectionChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.UIStrings.CollectionChanged" />イベントを発生させます。
      </summary>
      <param name="e">イベントデータ。</param>
    </member>
    <member name="P:C1.Win.C1Input.UIStrings.Count">
      <summary>コレクションに含まれる要素の数を取得します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.UIStrings.ItemAdded">
      <summary>コレクションに新しい項目が追加されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.UIStrings.ItemChanged">
      <summary>コレクション内の項目が変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.UIStrings.CollectionChanged">
      <summary>コレクションが変化すると発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.UIStrings.TypeConverter">
      <summary>
        <see cref="T:C1.Win.C1Input.UIStrings" />型の型変換を提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="culture"></param>
      <param name="value"></param>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="value"></param>
      <param name="attrFilter"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Input.C1ComboBox">
      <summary>テキストボックスとドロップダウン項目リストを組み合わせた複合コントロールを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1DropDownControl">
      <summary>C1DateEdit コントロールと C1NumericEdit コントロールの基本クラスです。ドロップダウンおよびアップ/ダウンボタンをサポートします。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1TextBox">
      <summary>テキストフォーム上で情報を入力および編集するために使用されるメインのデータ連結コントロールです。 日時書式のための特殊機能など、すべてのデータ型のデータ書式設定をサポートします。 編集マスク、データ検証などの機能もサポートします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.#ctor">
      <summary>C1TextBox クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.Dispose(System.Boolean)">
      <summary>C1TextBox によって使用されたリソースを解放します。</summary>
      <param name="disposing"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ResetVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.C1TextBox.VisualStyle" />をデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ShouldSerializeVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.C1TextBox.VisualStyle" />がシリアライズされるかどうかをテストします。
      </summary>
      <returns>
        <see cref="P:C1.Win.C1Input.C1TextBox.VisualStyle" />がシリアライズされる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.SetProposedValue(System.Object)">
      <summary>このメソッドの機能は、Value プロパティの設定に似ています。ただし、このメソッドは、編集前の値が格納されている内部変数を変更しないので、 ユーザーは［Esc］キーを押して前の値を復元することができます。 このメソッドは編集モードでのみ動作します。コントロールが編集モードでない場合、このメソッドは何も行いません。</summary>
      <param name="value">コントロールに設定する値。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.SuspendNumericInput(System.Boolean,System.Boolean)">
      <summary>このメソッドは、数値入力モードを一時的に無効にします</summary>
      <param name="suspend">True で数値入力を一時停止し、False で再開します</param>
      <param name="updateValue">True の場合は、現在のコントロールテキストから値が取得され、コントロールの Value が更新されます。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ParseContent(System.Object@,C1.Win.C1Input.ErrorInfo)">
      <summary>Text 文字列を解析します。</summary>
      <param name="parsedValue">出力パラメータ：解析の結果。</param>
      <param name="errorInfo">出力パラメータ：エラーが発生した場合にエラー情報を説明するオブジェクト。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.SetCutureInfo(System.Globalization.CultureInfo)">
      <summary>カルチャを設定します。</summary>
      <param name="cultureInfo">新しいカルチャ。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.CheckValidationResult(C1.Win.C1Input.ErrorReasonEnum,System.Object@,C1.Win.C1Input.ErrorInfo)">
      <summary>ParseContent メソッドの結果をチェックします。</summary>
      <param name="reason">検証の失敗理由を示す値</param>
      <param name="parsedValue">検証されていた DataType 型の解析値</param>
      <param name="errorInfo">エラーが発生した場合にエラー情報を説明するオブジェクト</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.UpdateValueWithCurrentText">
      <summary>Text プロパティの解析を行い、Value を更新します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.IncDateTimeInput">
      <summary>DateTimeInput モードで現在選択されているフィールドをインクリメントします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.DecDateTimeInput">
      <summary>DateTimeInput モードで現在選択されているフィールドをデクリメントします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ValidateText">
      <summary>コントロールがフォーカスを失った後に通常行われる検証と同様に、現在の Text プロパティを検証します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.SafeRecreateHandle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.UpdateNC">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.DrawBorder(System.Drawing.Graphics,System.IntPtr,System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="g"></param>
      <param name="dc"></param>
      <param name="clear"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.DrawFocusRectangle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.CalcSizeInternal">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.WmNCPaintSingleline(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.BeginInit">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.EndInit">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.UpdateDataType(System.Type)">
      <summary>これは内部使用専用です。</summary>
      <param name="propertyType"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnCultureInfoSetup(C1.Win.C1Input.CultureInfoSetupEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnFormatError(C1.Win.C1Input.FormatErrorEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnFormatting(C1.Win.C1Input.FormatEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnFormatted(C1.Win.C1Input.FormatEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnParsing(C1.Win.C1Input.ParseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnParsed(C1.Win.C1Input.ParseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnPreValidating(C1.Win.C1Input.PreValidationEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnPreValidated(C1.Win.C1Input.PreValidationEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnPostValidating(C1.Win.C1Input.PostValidationEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnPostValidated(C1.Win.C1Input.PostValidationEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnDataTypeChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnValueChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnValidationError(C1.Win.C1Input.ValidationErrorEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnBindingFormatting(System.Windows.Forms.ConvertEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnBindingParsing(System.Windows.Forms.ConvertEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnVerticalAlignChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnMarginsChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnBorderColorChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1TextBox.BorderColorChanged" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
      <remarks>
        <para>イベントが発生すると、デリゲートからイベントハンドラが呼び出されます。</para>
        <para>
          派生クラスでは、
          <b>OnBorderColorChanged</b>メソッドを使用して、デリゲートをアタッチせずにイベントを処理することもできます。 これは、派生クラスでイベントを処理する場合にお勧めのテクニックです。
        </para>
        <para>
          <b>継承時のメモ：</b>派生クラスで
          <b>OnBorderColorChanged</b>をオーバーライドする場合は、 登録済みのデリゲートがイベントを受け取るように、必ず基本クラスの
          <b>OnBorderColorChanged</b>メソッドを呼び出してください。
        </para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ResetText">
      <summary>現在の Value でコントロールの Text を更新します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.C1TextBox.m_c1embedded">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.Win.C1Input.C1TextBox.m_c1embedEndOnSideArrows">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.OnParentChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.FlatSystemBorder">
      <summary>System VisualStyle の Fixed3D 境界線を従来の 外観（フラット）にします。 このプロパティは、従来のアプリケーションとの互換性のみを目的としています。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.MarkEmpty">
      <summary>値が空の場合に赤色の点線を描画します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.BorderColor">
      <summary>コントロールの境界線色を取得または設定します。</summary>
      <remarks>
        <para>
          コントロールの境界線色を指定するには、
          <b>BorderColor</b>プロパティを使用します。 このプロパティは、
          <see cref="T:System.Drawing.Color" />オブジェクトを使用して設定されます。
        </para>
        <para>
          <b>BorderColor</b>プロパティは、
          <see cref="P:C1.Win.C1Input.C1TextBox.BorderStyle" />プロパティが
          <b>FixedSingle</b>に設定されている場合にのみ有効です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.VisualStyle">
      <summary>コントロールのビジュアルスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DisabledForeColor">
      <summary>無効なコントロールの前景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.NegativeForeColor">
      <summary>負の値を含むコントロールの前景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.UseColumnStyles">
      <summary>このコントロールの C1ViewColumn オブジェクトで定義されている ColumnStyle プロパティを優先的に使用するかどうかを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.Culture">
      <summary>カルチャ ID です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.CalendarType">
      <summary>日付の書式設定に使用するカレンダー。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.CultureName">
      <summary>プロパティグリッド内の Culture プロパティに対して選択された名前</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.UserCultureOverride">
      <summary>True の場合、選択されたカルチャよりユーザーの現在の地域設定が優先的に使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.CultureInfo">
      <summary>現在の CultureInfo オブジェクトです（実行時に利用可能）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DisplayFormat">
      <summary>コントロールが編集モードではない（入力フォーカスがないか、読み取り専用）ときに、値を表示するために使用される書式です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.EditFormat">
      <summary>コントロールが編集モード（入力フォーカスがあり、読み取り専用ではない）のときに値を表示するために使用される書式です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.CharCategory">
      <summary>キーボード入力をフィルタ処理する規則を定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.ParseInfo">
      <summary>解析（ユーザーによって入力された文字列からデータ型への変換）に影響を及ぼす設定です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.MaskInfo">
      <summary>編集マスクの設定です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.MaxLength">
      <summary>コントロールが保有できる最大の文字数またはバイト数を取得または設定します。</summary>
      <value>
        コントロールに入力できる （
        <b>LengthAsByte</b>プロパティによって決定される） 文字数またはバイト数。
        <br />デフォルトは
        <b>ゼロ</b>です。
      </value>
      <remarks>
        <b>MaxLength</b>プロパティにより、ユーザーがコントロールに入力できる 文字数を制限できます。デフォルト値は０です。 この値の場合、文字数は制限されません。０よりも大きい任意の値は、 文字の最大数を示します。
        <see cref="P:C1.Win.C1Input.MaxLengthUnit" />を使用すると、結果と共に
        <b>MaxLength</b>プロパティが表示されます。
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">値がゼロ未満の場合は、ArgumentOutOfRangeException が生成されます。</exception>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.MaxLineCount">
      <summary>行の最大数を取得または設定します。</summary>
      <value>
        行の最大数を示す
        <b>int</b>値。
        <br />デフォルトは
        <b>ゼロ</b>です。
      </value>
      <remarks>
        <para>
          <see cref="P:C1.Win.C1Input.C1TextBox.Multiline" />プロパティが
          <see langword="true" />の場合、
          <b>MaxLineCount</b>は、テキストの受け入れ行を制限します。
        </para>
        <para>
          <see cref="P:System.Windows.Forms.TextBoxBase.WordWrap" />プロパティが
          <see langword="true" />場合、このプロパティは、折り返された行では機能しないため、
          <b>MaxLineCount</b>が使用されます。
        </para>
        <para>このプロパティのデフォルト値０は、無制限を意味します。</para>
      </remarks>
      <seealso cref="P:C1.Win.C1Input.C1TextBox.Multiline" />
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.MaxLengthUnit">
      <summary>コントロール内に表示できる最大文字数が バイト、文字、テキスト要素のどれに基づいて処理されるかを取得または設定します。</summary>
      <remarks>
        <see cref="P:C1.Win.C1Input.C1TextBox.MaxLength" />プロパティのカウントに使用する単位を決定します。 値の
        <b>LengthUnit.Byte</b>は、MaxLength が Byte によってカウントされることを示します。 値の
        <b>LengthUnit.Char</b>は、MaxLength が Char によってカウントされることを示します。
      </remarks>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.CaseSensitive">
      <summary>文字列比較で、大文字小文字を区別する場合は True、そうでない場合は False です。デフォルト：False</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.FormatType">
      <summary>標準 .NET 書式指定子、カスタム書式設定、プログラム書式設定など、書式設定方法を指定する列挙値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.CustomFormat">
      <summary>FormatType = FormatTypeEnum.CustomFormat の場合に使用されるカスタム書式指定子です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.NullText">
      <summary>DBNull 値を表す文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.EmptyAsNull">
      <summary>True の場合、空の文字列は null 値（DBNull）として解釈されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.TrimStart">
      <summary>True の場合は、先頭のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.TrimEnd">
      <summary>True の場合は、末尾のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.EditMask">
      <summary>ユーザー入力を制限する編集マスク文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.NumericInput">
      <summary>数値で特殊編集モードを使用するかどうかを示す値を設定または取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.NumericInputKeys">
      <summary>NumericInput = True の場合に使用する特殊キーを有効/無効にします。デフォルト：NumericInputKeyFlags.Standard.</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DateTimeInput">
      <summary>特殊編集モードを DateTime 値に適用するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.CurrentTimeZone">
      <summary>True の場合、コントロールの格納されている Value は現在のタイムゾーンにあります。そうでない場合、Value は GMTOffset プロパティによって定義されるタイムゾーンに調整されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.GMTOffset">
      <summary>CurrentTimeZone = False の場合に使用される Value プロパティのタイムゾーンです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.WrapDateTimeFields">
      <summary>このプロパティが False の場合は、ユーザーが日付を増加させて月の末日を超えると、自動的に次の月になります。日付/時刻値の他の部分についても同様です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.LoopPosition">
      <summary>最後のフィールドが入力されると、カレットの位置を自動的に最初のフィールドに移動するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.AutoChangePosition">
      <summary>文字の位置が自動的に変更されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DaylightTimeAdjustment">
      <summary>GMTOffset プロパティで指定された値は、夏時間による変更に応じて進めたり、遅らせることができます。デフォルト：NoAdjustments。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.MinShortYear">
      <summary>先頭に０を付けなくても入力できる最小の年です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.PreValidation">
      <summary>解析（ユーザーによって入力された文字列から DataType への変換）の前に適用される検証規則です（元の文字列の検証）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.PostValidation">
      <summary>解析（ユーザーによって入力された文字列から DataType への変換）の後に適用される検証規則です（型付きの検証）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.CausesValidation">
      <summary>コントロールが検証を行う（Validating イベントと Validated イベントを呼び出す）かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.Tag">
      <summary>コントロールに関するデータを含むオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.BaseText">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.TextLength">
      <summary>コントロール内のテキストの長さを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.Lines">
      <summary>複数行コントロール内のテキストの行です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.TextDetached">
      <summary>Value プロパティと Text プロパティを個別に設定できるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DataSource">
      <summary>コントロールのバインド先のデータソースオブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DataField">
      <summary>コントロールのバインド先のデータソースオブジェクトのフィールドです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DataType">
      <summary>Value プロパティの型です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.ValueIsDbNull">
      <summary>Value が DBNull かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.Value">
      <summary>C1Input コントロールの主要な連結可能プロパティです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.ErrorInfo">
      <summary>コントロール内のエラー処理に影響を及ぼす設定です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.AcceptsEscape">
      <summary>値の変更をキャンセルする［Esc］キーをオーナーフォームに渡さずにコントロールで処理するか（AcceptsEscape=True）、［Esc］キーをフォームに渡し、フォームに CancelButton がある場合にフォームを閉じることができるようにするか（AcceptsEscape=False）を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.AcceptsTab">
      <summary>編集マスクと DateTimeInput モードで、コントロールが［Tab］キーと［Shift］+［Tab］キーを受け入れて、入力文字の次（前）のグループにフォーカスを移動するかどうかを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.Modified">
      <summary>コントロールが入力フォーカスを受け取ったか、コントロールの Value が最後に設定されてから、コントロールがユーザーによって変更されたことを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.EditMode">
      <summary>コントロールに入力フォーカスがあり、TextDetached = False の場合は、True を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.Label">
      <summary>この入力フィールドに関連付けられたラベルコントロールです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.InitialSelection">
      <summary>コントロールが入力フォーカスを受け取るときの選択位置を指定します。デフォルト：InitialSelectionEnum.SelectAll.</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DisableOnNoData">
      <summary>テキストボックスが空のデータソース（CurrencyManager.Count = 0）に連結されたとき、テキストボックスを無効にする必要があるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.ShowFocusRectangle">
      <summary>コントロールに入力フォーカスがあるときに、クライアント領域の周囲にフォーカス四角形を表示するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.ShowContextMenu">
      <summary>コントロールにコンテキストメニューを表示できるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.AutoSize">
      <summary>コントロールに割り当てられたフォントが変更されたときに、コントロールの高さが自動的に調節されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.Enabled">
      <summary>コントロールがユーザーの操作に応答できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.VerticalAlign">
      <summary>コントロール内のコンテンツの垂直方向の配置を取得または設定します。デフォルトは VerticalAlignEnum.Top です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.Margins">
      <summary>入力コントロールの内容からコントロールの端までのピクセル単位のスペースを取得または設定します。デフォルト：すべてのマージンが０に設定されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.ValueChangedBehavior">
      <summary>テキスト変更時に ValueChanged イベントが発生する従来の動作との下位互換性を維持します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.ExitOnLastChar">
      <summary>コントロールの最後の文字が入力されたら、次のタブオーダーのコントロールが即座に フォーカスを受け取るかどうかを取得または設定します。</summary>
      <value>
        入力コントロールで定義された最後の文字が入力されたら、次のタブオーダーのコントロールが即座にフォーカスを受け取る場合は
        <see langword="true" />、 そうでない場合は
        <see langword="false" />。
        <br />デフォルトは
        <see langword="false" />です。
      </value>
      <remarks>最後に入力された文字により、テキストがコントロールの限度を超えたとき、入力フォーカスは次のコントロールに移動します。</remarks>
      <seealso cref="P:C1.Win.C1Input.C1TextBox.ExitOnLeftRightKey" />
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.ExitOnLeftRightKey">
      <summary>左矢印キーまたは右矢印キーが押されたときに、フォーカスがタブオーダーの前または次のコントロールに自動的に 移動するかどうかを取得または設定します。</summary>
      <value>
        <see cref="P:C1.Win.C1Input.C1TextBox.ExitOnLeftRightKey" />列挙値の１つ。
        <br />デフォルトは
        <see cref="F:C1.Win.C1Input.ExitOnLeftRightKey.None" />です。
      </value>
      <remarks>このプロパティの値は、入力フォーカスを次のコントロールに移動するキーを示します。 カレットがこのコントロールの最後の文字にあるとき、右矢印キーが押されると、フォーカスが移動します。 カレットがこのコントロールの最初の文字の前にあるとき、左矢印キーが押されると、フォーカスが移動します。</remarks>
      <seealso cref="P:C1.Win.C1Input.C1TextBox.ExitOnLastChar" />
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.BorderColorChanged">
      <summary>BorderColor プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.VisualStyleChanged">
      <summary>VisualStyle プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.CultureInfoSetup">
      <summary>CultureInfo を（起動時に）セットアップできるか、既に変更されています。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.FormatError">
      <summary>コントロールが現在の書式設定や編集マスク設定に従って書式設定できないデータを受け取ると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.Formatting">
      <summary>プログラムによって値を書式設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.Formatted">
      <summary>値が書式設定された後に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.Parsing">
      <summary>プログラムによる入力文字列の解析です。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.Parsed">
      <summary>入力文字列値が DataType に変換された後に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.PreValidating">
      <summary>プログラムによって入力文字列を検証します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.PreValidated">
      <summary>入力文字列値が検証された後に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.PostValidating">
      <summary>プログラムによって型付きの値を検証します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.PostValidated">
      <summary>型付きの値が検証された後に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.DataTypeChanged">
      <summary>DataType プロパティが変更されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.ValueChanged">
      <summary>値が変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.ValidationError">
      <summary>入力文字列の解析中または検証中に発生したエラーです。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.BindingFormatting">
      <summary>データソースから Value が取得されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.BindingParsing">
      <summary>データソースに Value が格納される時に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.VerticalAlignChanged">
      <summary>VerticalAlign プロパティの値が変化すると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.MarginsChanged">
      <summary>Margins プロパティまたはいずれかのマージンが変化すると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.InvalidInput">
      <summary>無効な文字が入力されたときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1TextBox.DefaultThemeRootPath">
      <summary>xml テーマファイルのコントロールのデフォルトのパス。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.#ctor">
      <summary>C1DropDownControl クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.Dispose(System.Boolean)">
      <summary>C1DropDownControl によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldSerializeDropDownFormClassName">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ResetDropDownFormClassName">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldSerializeButtonCursor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ResetButtonCursor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldSerializeButtonImages">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ResetButtonImages">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OpenDropDown">
      <summary>ドロップダウンを表示します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.CloseDropDown">
      <summary>ドロップダウンを閉じます。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.CloseDropDown(System.Boolean)">
      <summary>ドロップダウンを閉じます。</summary>
      <param name="doPost"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.SpinUp">
      <summary>スピンアップアクションを実行します。</summary>
      <remarks>このメソッドは、上矢印キーが押されたときと同じ動作をします。</remarks>
      <seealso cref="M:C1.Win.C1Input.C1DropDownControl.SpinDown" />
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.SpinDown">
      <summary>スピンダウンアクションを実行します。</summary>
      <remarks>このメソッドは、下矢印キーが押されたときと同じ動作をします。</remarks>
      <seealso cref="M:C1.Win.C1Input.C1DropDownControl.SpinUp" />
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownOpening(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnBeforeDropDownOpen(System.ComponentModel.CancelEventArgs)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownOpened(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownClosed(C1.Win.C1Input.DropDownClosedEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnUpDownButtonClick(C1.Win.C1Input.UpDownButtonClickEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnModalButtonClick(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnCustomButtonClick(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownFormAlignChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownAlignChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnButtonCursorChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnCreateDropDownFrom(C1.Win.C1Input.DropDownForm)">
      <summary>ドロップダウンフォームが作成されると呼び出されます。</summary>
      <param name="dropDownForm">新しいドロップダウンフォーム。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.CalcSizeInternal">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.WmNCPaintSingleline(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.GetImageSize">
      <summary>画像のサイズを返します。</summary>
      <returns>サイズオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.DrawCustomArea(System.Drawing.Graphics)">
      <summary>これは内部使用専用です。</summary>
      <param name="g"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnReadOnlyChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnEnabledChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.WndProc(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnMouseLeave(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnGotFocus(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnLostFocus(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ProcessKeyPress(System.Windows.Forms.KeyPressEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ProcessKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnTextChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnValueChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.OnCursorChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldHandleEscape">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.PreProcessMessage(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DropDownControl.DrawImage(System.Drawing.Graphics,System.IntPtr,System.Drawing.Rectangle)">
      <summary>コントロールに画像を描画します。</summary>
      <param name="g">グラフィックオブジェクト。</param>
      <param name="dc">デバイスコンテキスト。</param>
      <param name="bounds">画像を描画する四角形。</param>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DefaultThemeRootPath">
      <summary>デフォルトのパス。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.AutoOpen">
      <summary>このコントロールがフォーカスを受け取ったときにコンボボックスを開くかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownFormCreationTime">
      <summary>デフォルトのドロップダウンフォームが作成された時刻を決定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ImagePlace">
      <summary>ShowValueImage が true を返した場合に限り、有効な値を持ちます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownStyle">
      <summary>コンボボックスのスタイルを取得または設定します。</summary>
      <remarks>
        DropDownStyle プロパティは、テキスト部分を編集できるかどうかを指定します。
        <para>値が Default の場合、テキストは編集可能で、下矢印をクリックすると、ドロップダウンリストが表示されます。</para><para>値が DropDownList の場合、テキストは編集不可能で、コントロールの任意の部分をクリックすると、ドロップダウンリストが表示されます。</para></remarks>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.Image">
      <summary>ボタン画像を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ImageIndex">
      <summary>ImageList 内のボタン画像のインデックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ImageKey">
      <summary>ImageList 内のボタン画像のキーを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ImageList">
      <summary>ドロップダウン項目に表示する画像を取得するための ImageList を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ImagePadding">
      <summary>画像のパディングを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.VisibleButtons">
      <summary>表示するボタンを示す値を取得または設定します。デフォルトは（UpDown Or DropDown）です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ShowDropDownButton">
      <summary>ドロップダウンボタンを表示するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ShowUpDownButtons">
      <summary>アップ/ダウンボタンを表示するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ShowModalButton">
      <summary>モーダルボタンを表示するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ShowCustomButton">
      <summary>モーダルボタンを表示するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.InterceptArrowKeys">
      <summary>アップ/ダウンボタンが上/下矢印キーを受け取って処理するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownFormClassName">
      <summary>ドロップダウンウィンドウとして機能するフォームのクラス名を指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownForm">
      <summary>コントロールに関連付けられたドロップダウンフォームのインスタンスを返します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DefaultDropDownFormClassName">
      <summary>コントロールのドロップダウンとしてデフォルトで使用されるフォームクラスを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DefaultDropDownForm">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DefaultSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DroppedDown">
      <summary>ドロップダウンが現在開いているかどうかを示す、実行時の読み取り専用プロパティです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ButtonWidth">
      <summary>デフォルトの幅の代わりに使用するボタン幅を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.GapHeight">
      <summary>コントロールの端からドロップダウンまでのピクセル単位の距離です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.MouseClickPassThrough">
      <summary>ドロップダウンを閉じた後にマウスクリックイベントを処理するか、そのまま渡すかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownFormAlign">
      <summary>コントロールに対するドロップダウンフォームの配置です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ButtonCursor">
      <summary>マウスがボタン上にあるときに表示されるカーソルです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ButtonImages">
      <summary>ボタンの画像を取得または設定します</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.Cursor">
      <summary>コントロール内にマウスポインタがあるときに表示されるカーソルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.CustomAreaPlace">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.CustomAreaWidth">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.UpDownButtonAlignment">
      <summary>スピンボタンの配置を取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownOpening">
      <summary>ドロップダウンが開かれる直前に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.BeforeDropDownOpen">
      <summary>ドロップダウンが開かれる直前に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownOpened">
      <summary>ドロップダウンが開かれた後に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownClosed">
      <summary>ドロップダウンが閉じられると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.UpDownButtonClick">
      <summary>アップ/ダウンボタンがクリックされると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.ModalButtonClick">
      <summary>モーダルボタンがクリックされると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.CustomButtonClick">
      <summary>[カスタム] ボタンがクリックされると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownFormAlignChanged">
      <summary>DropDownFormAlign プロパティの値が変化すると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownAlignChanged">
      <summary>DropDownAlign プロパティの値が変化すると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DropDownControl.ButtonCursorChanged">
      <summary>ButtonCursor プロパティの値が変化すると発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.MinSizeInternal">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DropDownControl.ShowImage">
      <summary>画像を表示するかどうかを指定します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ComboBox.#ctor">
      <summary>C1ComboBox クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ComboBox.SetItemsDataSource(System.Object,System.String)">
      <summary>C1ComboBox の項目のデータソースとデータメンバを設定します。</summary>
      <param name="dataSource">データソース。</param>
      <param name="dataMember">データメンバ。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1ComboBox.SetItemsDataSource(System.Object,System.String,System.Int32)">
      <summary>C1ComboBox の項目のデータソース、データメンバ、および最初に選択されている項目のインデックスを設定します。</summary>
      <param name="dataSource">データソース。</param>
      <param name="dataMember">データメンバ。</param>
      <param name="selectedIndex">最初に選択されている項目のインデックス。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1ComboBox.CreateItemsCollection">
      <summary>項目コレクションの新しいインスタンスを作成します。</summary>
      <returns>
        新しい項目コレクションを表す
        <see cref="T:C1.Win.C1Input.ComboBoxItemList" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.C1ComboBox.OnSelectedItemChanged">
      <summary>
        <see cref="E:C1.Win.C1Input.C1ComboBox.SelectedItemChanged" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ComboBox.OnSelectedIndexChanged">
      <summary>
        <see cref="E:C1.Win.C1Input.C1ComboBox.SelectedIndexChanged" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ComboBox.Dispose(System.Boolean)">
      <summary>C1ComboBox によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.AllowSpinLoop">
      <summary>スピナーが最後に達したときに最初の項目に移動したり、最初に達したときに最後に移動するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.Items">
      <summary>この ComboBox に含まれるアイテムのコレクションを表すオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.ItemMode">
      <summary>コンボボックス項目モードを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.HtmlPattern">
      <summary>コンボボックス項目の HTML 表現を作成するためのパターンを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.SelectedItem">
      <summary>コンボボックスで現在選択されている項目を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.SelectedIndex">
      <summary>現在選択されている項目を示すインデックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.ItemsImageList">
      <summary>コンボボックス項目に表示する画像を取得するための ImageList を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.Style">
      <summary>ドロップダウンフォームとコンボボックス項目のスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.InitialSelectedIndex">
      <summary>最初に選択される項目のインデックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.ItemsDataSource">
      <summary>この C1ComboBox の項目のデータソースを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.ItemsDisplayMember">
      <summary>この C1ComboBox コントロールの項目を表示するプロパティを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.ItemsValueMember">
      <summary>C1ComboBox コントロール内の項目の実際の値として使用するプロパティのパスを取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1ComboBox.SelectedItemChanged">
      <summary>
        <see cref="P:C1.Win.C1Input.C1ComboBox.SelectedItem" />が変更されたときに発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Input.C1ComboBox.SelectedIndexChanged">
      <summary>
        <see cref="E:C1.Win.C1Input.C1ComboBox.SelectedIndexChanged" />が変更されたときに発生します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Input.ComboItemMode">
      <summary>コンボボックスのビジュアル表現がどのように構築されるかを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ComboItemMode.Default">
      <summary>C1ComboBox は、ドロップダウンリストにコンボボックス項目のテキストを表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ComboItemMode.Html">
      <summary>
        各コンボボックス項目は HTML フラグメントです。
        <see cref="T:C1.Win.C1Input.C1ComboBox" />は、その HTML フラグメントを解析してドロップダウン項目として表示します。
      </summary>
      <remakrs>C1ComboBox uses the same subset of HTML as C1SuperLabel does. It does not support the full HTML features.</remakrs>
    </member>
    <member name="F:C1.Win.C1Input.ComboItemMode.HtmlPattern">
      <summary>
        各コンボボックス項目は、
        <see cref="P:C1.Win.C1Input.C1ComboBox.HtmlPattern" />プロパティで定義される HTML フラグメントです。
        <see cref="T:C1.Win.C1Input.C1ComboBox" />は、この HTML パターンを解析し、すべての "{Text}" エントリをコンボボックス項目のテキストに置き換えます。
      </summary>
      <remakrs>C1ComboBox uses the same subset of HTML as C1SuperLabel does. It does not support the full HTML features.</remakrs>
    </member>
    <member name="T:C1.Win.C1Input.DropDownStyle">
      <summary>
        <see cref="T:C1.Win.C1Input.C1DropDownControl" />スタイルを示します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownStyle.Default">
      <summary>ドロップダウンコントロールのテキスト部分は編集可能で、下矢印をクリックすると、 ドロップダウンが表示されます。</summary>
      <remarks>つまり、ユーザーは、既存の値を選択することに制限されず、新しい値を入力することもできます。</remarks>
    </member>
    <member name="F:C1.Win.C1Input.DropDownStyle.DropDownList">
      <summary>
        コントロールのテキスト部分またはドロップダウンボタンのいずれかをクリックすると、
        <see cref="T:C1.Win.C1Input.C1DropDownControl" />の ドロップダウンが表示されます。テキスト部分は編集できません。
      </summary>
      <remarks>これは、ドロップダウンに存在しない値は入力できないことを意味します。</remarks>
    </member>
    <member name="T:C1.Win.C1Input.ComboBoxItemList">
      <summary>
        <see cref="T:C1.Win.C1Input.C1ComboBox" />ドロップダウン項目のコレクションを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Input.DropDownForm">
      <summary>カスタムドロップダウンフォームの基本クラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.#ctor">
      <summary>DropDownForm クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.Dispose(System.Boolean)">
      <summary>DropDownForm によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.PreFilterMessage(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnPostChanges(System.EventArgs)">
      <summary>PostChanges イベントを発生させます。</summary>
      <param name="e">イベントを記述する引数が含まれます。</param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnCancelChanges(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnOpen(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnOwnerControlTextChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnOwnerControlValueChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnActivated(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnDeactivate(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.CreateHandle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnVisibleChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.WndProc(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.CloseDropDown">
      <summary>ドロップダウンフォームを閉じます。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownForm.CloseDropDown(System.Boolean)">
      <summary>ドロップダウンフォームを閉じます。</summary>
      <param name="doPost"></param>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.ShouldApplyTheme">
      <summary>
        <see cref="T:C1.Win.C1Input.C1DropDownControl" />にテーマを適用したときに、 それをドロップダウンフォームにも適用するかどうかを示す値を取得します。デフォルトでは、このプロパティは
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.BorderStyle">
      <summary>コントロールの境界線のスタイルを決定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.ClientSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.Options">
      <summary>ドロップダウンフォームのさまざまな動作オプションを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.FocusControl">
      <summary>フォームが表示されたときに入力フォーカスを取得するフォーム上のコントロールを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.DropDownAlign">
      <summary>オーナーコントロールに対するドロップダウンフォームの配置。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.OwnerControl">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.CreateParams">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownForm.KeyPreview">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownForm.PostChanges">
      <summary>OwnerControl の Value プロパティがドロップダウンフォームによって更新されるときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownForm.CancelChanges">
      <summary>ドロップダウンフォームによって行われた変更がキャンセルされるときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownForm.Open">
      <summary>ドロップダウンフォームが開かれたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownForm.OwnerControlTextChanged">
      <summary>OwnerControl.Text プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownForm.OwnerControlValueChanged">
      <summary>OwnerControl.Value プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ComboBoxStyle">
      <summary>ドロップダウンフォームとコンボボックス項目のスタイル。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ComboBoxStyle.Reset">
      <summary>スタイルをデフォルト値にリセットします。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.DropDownBackColor">
      <summary>ドロップダウンフォームの背景色。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.DropDownBorderColor">
      <summary>ドロップダウンフォームの境界線の色。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.Padding">
      <summary>ドロップダウンフォーム内のパディングを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.Font">
      <summary>コンボボックス項目のデフォルトのフォント。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.TextSpacing">
      <summary>コンボボックス項目のテキスト部分の周囲のスペース。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.DefaultItemForeColor">
      <summary>コンボボックス項目のデフォルトのテキスト色。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.HotItemForeColor">
      <summary>ホット状態のコンボボックス項目のテキスト色。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.HotItemBorderColor">
      <summary>ホット状態のコンボボックス項目の境界線色。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ComboBoxStyle.HotItemBackColor">
      <summary>ホット状態のコンボボックス項目の背景色。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1DateEdit">
      <summary>日付や時間の値を表示および編集します。日時値を簡単に入力できるドロップダウンカレンダーの機能が付いています。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.#ctor">
      <summary>C1DateEdit クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.Dispose(System.Boolean)">
      <summary>C1DateEdit によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.ShouldSerializeCalendar">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.OnUpDownButtonClick(C1.Win.C1Input.UpDownButtonClickEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.UpdateDataType(System.Type)">
      <summary>これは内部使用専用です。</summary>
      <param name="propertyType"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.SpinUp">
      <summary>スピンアップを実行します。</summary>
      <remarks>このメソッドは、［日］フィールドが選択されて、上矢印キーが押されたときと同じように動作し、値を１日インクリメントします。</remarks>
      <seealso cref="M:C1.Win.C1Input.C1DateEdit.SpinDown" />
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.SpinUp(System.TimeSpan)">
      <summary>スピンアップを実行します。</summary>
      <param name="increment">
        スピンアップ時にインクリメントを示す
        <see cref="T:System.TimeSpan" />値。
      </param>
      <remarks>このメソッドは、上矢印キーが押されたときと同じ動作をします。</remarks>
      <seealso cref="M:C1.Win.C1Input.C1DateEdit.SpinDown(System.TimeSpan)" />
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.SpinDown">
      <summary>スピンダウンを実行します。</summary>
      <remarks>このメソッドは、［日］フィールドが選択されて、下矢印キーが押されたときと同じように動作し、値を１日デクリメントします。</remarks>
      <seealso cref="M:C1.Win.C1Input.C1DateEdit.SpinUp" />
    </member>
    <member name="M:C1.Win.C1Input.C1DateEdit.SpinDown(System.TimeSpan)">
      <summary>スピンダウンを実行します。</summary>
      <param name="decrement">
        スピンダウン時にデクリメントを示す
        <see cref="T:System.TimeSpan" />値。
      </param>
      <remarks>このメソッドは、下矢印キーが押されたときと同じ動作をします。</remarks>
      <seealso cref="M:C1.Win.C1Input.C1DateEdit.SpinUp(System.TimeSpan)" />
    </member>
    <member name="P:C1.Win.C1Input.C1DateEdit.AllowSpinLoop">
      <summary>
        スピナーが
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate" />に達したときに
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate" />に移動したり、
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate" />に達したときに
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate" />に移動するかどうかを指定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DateEdit.RetainTimeOnDateChange">
      <summary>日付がドロップダウンカレンダーによって変更されるとき、現在の時刻値を保持するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DateEdit.DefaultDropDownFormClassName">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DateEdit.TypeRestriction">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DateEdit.Calendar">
      <summary>ドロップダウンカレンダーオブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DateEdit.FormatType">
      <summary>標準 .NET 書式指定子、カスタム書式設定、プログラム書式設定など、書式設定方法を指定する列挙値。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DateEdit.Text">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DateEditMonthCalendar">
      <summary>ドロップダウンカレンダーを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Input.DateEditMonthCalendar" />クラスのインスタンスを作成します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyle" />をデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyle" />がシリアライズされるかどうかをテストします。
      </summary>
      <returns>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyle" />がシリアライズされる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTodayDate">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.TodayDate" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.TodayDate" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTodayDate">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.TodayDate" />プロパティをデフォルト値に設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeMinDate">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetMinDate">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate" />プロパティをデフォルト値に設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeMaxDate">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetMaxDate">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate" />プロパティをデフォルト値に設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeForeColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetForeColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeSelectionForeColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetSelectionForeColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeSelectionBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetSelectionBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeLineColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetLineColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeArrowColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetArrowColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTodayBorderColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTodayBorderColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTrailingForeColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTrailingForeColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeDayNamesColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDayNamesColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTitleBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTitleBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTitleForeColor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTitleForeColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeSelectedDate">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.SelectedDate" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.SelectedDate" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetSelectedDate">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.SelectedDate" />プロパティをデフォルト値に設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeCalendarDimensions">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarDimensions" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarDimensions" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetCalendarDimensions">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarDimensions" />プロパティをデフォルト値に設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeDayNameLength">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDayNameLength">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTitleHeight">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTitleHeight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTitleFont">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTitleFont">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeDayNamesFont">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDayNamesFont">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeBoldedDates">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.BoldedDates" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.BoldedDates" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetBoldedDates">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.BoldedDates" />をクリアします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeAnnuallyBoldedDates">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.AnnuallyBoldedDates" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.AnnuallyBoldedDates" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetAnnuallyBoldedDates">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.AnnuallyBoldedDates" />をクリアします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeMonthlyBoldedDates">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MonthlyBoldedDates" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MonthlyBoldedDates" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetMonthlyBoldedDates">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MonthlyBoldedDates" />をクリアします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeDisabledDates">
      <summary>
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.DisabledDates" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>
        デフォルトの
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.DisabledDates" />プロパティ値が変更されている場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDisabledDates">
      <summary>
        <see cref="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDisabledDates" />をクリアします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnTodayButtonClick(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnClearButtonClick(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnTodayButtonVisibilityChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnClearButtonVisibilityChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnDateValueChanged(C1.Win.C1Input.NullableDateTimeEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnDateValueSelected(C1.Win.C1Input.NullableDateTimeEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnRightToLeftLayoutChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DateEditMonthCalendar.RightToLeftLayoutChanged" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnMonthChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DateEditMonthCalendar.MonthChanged" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ContainsDate(System.DateTime)">
      <summary></summary>
      <param name="date"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.SuspendAllLayout">
      <summary>DateEditMonthCalendar のすべての子コントロールの SuspendLayout を呼び出します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResumeAllLayout(System.Boolean)">
      <summary>DateEditMonthCalendar のすべての子コントロールの ResumeLayout を呼び出します。</summary>
      <param name="performLayout">ここでレイアウトロジックを呼び出すかどうかを示します。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.AddAnnuallyBoldedDate(System.DateTime)">
      <summary>月間カレンダーに毎年太字で表示する日を追加します。</summary>
      <param name="date">太字で表示する日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.AddBoldedDate(System.DateTime)">
      <summary>月間カレンダーに太字で表示する日を追加します。</summary>
      <param name="date">太字で表示する日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.AddDisabledDate(System.DateTime)">
      <summary>月間カレンダーで無効にする日を追加します。</summary>
      <param name="date">無効にする日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.AddMonthlyBoldedDate(System.DateTime)">
      <summary>月間カレンダーに毎月太字で表示する日を追加します。</summary>
      <param name="date">太字で表示する日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAllAnnuallyBoldedDates">
      <summary>毎年太字で表示する日をすべて削除します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAllBoldedDates">
      <summary>一度だけ太字で表示する日をすべて削除します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAllDisabledDates">
      <summary>無効な日をすべて削除します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAllMonthlyBoldedDates">
      <summary>毎月太字で表示する日をすべて削除します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAnnuallyBoldedDate(System.DateTime)">
      <summary>毎年太字の日のリストから指定した日を削除します。</summary>
      <param name="date">日付リストから削除する日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveBoldedDate(System.DateTime)">
      <summary>一度だけ太字の日のリストから指定した日を削除します。</summary>
      <param name="date">日付リストから削除する日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveDisabledDate(System.DateTime)">
      <summary>無効な日のリストから指定した日を削除します。</summary>
      <param name="date">日付リストから削除する日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveMonthlyBoldedDate(System.DateTime)">
      <summary>毎月太字の日のリストから指定した日を削除します。</summary>
      <param name="date">日付リストから削除する日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.SetCalendarDimensions(System.Int32,System.Int32)">
      <summary>表示する月の列数と行数を設定します。</summary>
      <param name="x">列の数。</param>
      <param name="y">行の数。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.SetDate(System.DateTime)">
      <summary>現在選択された日付とする日付を設定します。</summary>
      <param name="date">選択する日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.GetDisplayRange(System.Boolean)">
      <summary>コントロールに表示されている日付の下限と上限を表す日付情報を取得します。</summary>
      <param name="visible">表示されている月に完全に含まれている日付だけを取得する場合は true、そうでない場合は false。</param>
      <returns>表示されているカレンダーの最初と最後の日。</returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.SetSelectionRange(System.DateTime,System.DateTime)">
      <summary>月間カレンダーコントロールで選択された日付として指定の日付範囲を設定します。</summary>
      <param name="date1">選択範囲の開始日。</param>
      <param name="date2">選択範囲の終了日。</param>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.HitTest(System.Drawing.Point)">
      <summary>System.Drawing.Point で指定された月間カレンダーコントロールの場所に 関する情報を含むオブジェクトを返します。</summary>
      <param name="point">ヒットテストする点の System.Drawing.Point.X 座標と System.Drawing.Point.Y 座標を含む System.Drawing.Point。</param>
      <returns>月間カレンダー上の指定された点に関する情報を含む System.Windows.Forms.MonthCalendar.HitTestInfo。</returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.HitTest(System.Int32,System.Int32)">
      <summary>指定された x 座標と y 座標で示される月間カレンダーコントロールの部分に関する 情報を含む System.Windows.Forms.MonthCalendar.HitTestInfo を返します。</summary>
      <param name="x">ヒットテストする点の System.Drawing.Point.Y 座標。</param>
      <param name="y">ヒットテストする点の System.Drawing.Point.X 座標。</param>
      <returns>月間カレンダー上の指定された点に関する情報を含む System.Windows.Forms.MonthCalendar.HitTestInfo。</returns>
    </member>
    <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CurrentMonthDisplayOffset">
      <summary>現在の月の表示オフセットを取得または設定します。</summary>
      <example>
        次の例では、現在の月を複数月ドロップダウンカレンダーの中心に 表示します。
        <code>c1DateEdit1.Calendar.CalendarDimensions = new Size(3, 1); // 現在の月をカレンダーの中心に表示します。 // 指定可能な値： // 0 - （デフォルト）右 // 1 - 中央 // 2 - 左 c1DateEdit1.Calendar.CurrentMonthDisplayOffset = 1;</code></example>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyle">
      <summary>VisualStyle を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TodayDate">
      <summary>DateEditMonthCalendar で今日の日付として使用される値を取得または設定します。 デフォルト値は、現在のシステム日付です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate">
      <summary>使用できる最小の日付を取得または設定します。デフォルト値は、DateTime.MinValue（01/01/0001）です。</summary>
      <exception cref="T:System.ArgumentException">
        値が
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate" />を超えています。
      </exception>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate">
      <summary>使用できる最大の日付を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">
        値が
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate" />未満です。
      </exception>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DateIsNull">
      <summary>カレンダーで現在選択されている日付がないことを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.BackColor">
      <summary>コントロールの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ForeColor">
      <summary>コントロールの前景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.SelectionForeColor">
      <summary>選択範囲の前景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.SelectionBackColor">
      <summary>選択範囲の背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.LineColor">
      <summary>線の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ArrowColor">
      <summary>矢印の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TodayBorderColor">
      <summary>現在の日付の周囲に描画される境界線の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TrailingForeColor">
      <summary>コントロール内に一部が表示されていない日の色を示す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DayNamesColor">
      <summary>日の名前のテキスト色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TitleBackColor">
      <summary>カレンダーのタイトル領域の背景色を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TitleForeColor">
      <summary>カレンダーのタイトル領域の前景色を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.FirstMonth">
      <summary>全体が表示されている最初の月の最初の日を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.LastMonth">
      <summary>全体が表示されている最後の月の最後の日を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.SelectedDate">
      <summary>選択されている日付を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarDimensions">
      <summary>月を何行何列に表示するかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.FirstDayOfWeek">
      <summary>月間カレンダーに表示する最初の曜日を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CaptionFormat">
      <summary>カレンダーのキャプションに使用する書式を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DayNameLength">
      <summary>日の名前の最大の長さを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TitleHeight">
      <summary>タイトルの高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TitleFont">
      <summary>タイトルのフォントを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DayNamesFont">
      <summary>日の名前のフォントを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.BoldedDates">
      <summary>一度だけ太字で表示する日付を決定する System.DateTime オブジェクトの配列を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.AnnuallyBoldedDates">
      <summary>毎年太字で表示する日付を決定する System.DateTime オブジェクトの配列を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.MonthlyBoldedDates">
      <summary>毎月太字で表示する日を決定する System.DateTime オブジェクトの配列を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DisabledDates">
      <summary>無効にする日付を決定する System.DateTime オブジェクトの配列を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowToday">
      <summary>TodayDate プロパティで表される日付をコントロールの下部に表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowTodayCircle">
      <summary>今日の日付を丸で囲むかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowTodayButton">
      <summary>ドロップダウンカレンダーの［今日］ボタンが表示されるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowClearButton">
      <summary>ドロップダウンカレンダーの［クリア］ボタンが表示されるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TodayText">
      <summary>［今日］ボタンのテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ClearText">
      <summary>［クリア］ボタンのテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarWeekRule">
      <summary>１年の最初の週を決定するためのルールを指定する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowWeekNumbers">
      <summary>月間カレンダーコントロールで各日付行の左に週番号（１～52）を 表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.RightToLeft">
      <summary>コントロールの要素が、右から左に表記されるフォントを使用するロケールをサポートするように配置されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DateEditMonthCalendar.RightToLeftLayout">
      <summary>このコントロールを右から左にレイアウトするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.VisualStyleChanged">
      <summary>VisualStyle プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.TodayButtonClick">
      <summary>［今日］ボタンがクリックされると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.ClearButtonClick">
      <summary>［クリア］ボタンがクリックされると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.TodayButtonVisibilityChanged">
      <summary>［今日］ボタンの表示状態が変更されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.ClearButtonVisibilityChanged">
      <summary>［クリア］ボタンの表示状態が変更されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DateValueChanged">
      <summary>Date プロパティの値が変化すると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DateValueSelected">
      <summary>ユーザーが Date プロパティに対して新しい値を選択すると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.RightToLeftLayoutChanged">
      <summary>RightToLeftLayout プロパティの値が変化すると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DateEditMonthCalendar.MonthChanged">
      <summary>
        C1DateEdit のドロップダウンカレンダーの月の変更を処理します。
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.FirstMonth" />または
        <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.LastMonth" />プロパティの値が変化すると発生します。
      </summary>
      <remarks>ユーザーが月の間をスクロール移動したときに月の一部の日付を太字に設定する場合に使用できます。</remarks>
      <example>
        次の例では、選択された月に新しい太字の日付を設定します。
        <code>private void c1DateEdit1_Calendar_MonthChanged(object sender, EventArgs e) { DateTime dt = c1DateEdit1.Calendar.FirstMonth; c1DateEdit1.Calendar.AddBoldedDate(new DateTime(dt.Year, dt.Month, dt.Month)); }</code></example>
    </member>
    <member name="T:C1.Win.C1Input.DropDownCalendar">
      <summary>ドロップダウンカレンダーフォームを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalendar.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Input.DropDownCalendar" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalendar.OnPostChanges(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalendar.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="P:C1.Win.C1Input.DropDownCalendar.Calendar">
      <summary>カレンダー。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1DbNavigator">
      <summary>データソースの行間を簡単に移動するためのボタンを提供するデータ連結コントロール。 先頭、末尾、前、および次の行への移動、データソースの更新、データのリフレッシュなどの一般的なデータ操作を実行できます。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.#ctor">
      <summary>C1DbNavigator クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.Dispose(System.Boolean)">
      <summary>C1DbNavigator によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.BeginInit">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.EndInit">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnTextChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1DbNavigator.TextChanged">TextChanged</see>イベントを発生させます。
      </summary>
      <param name="e">イベントデータを含む EventArgs。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ResetVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.C1DbNavigator.VisualStyle" />をデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.C1DbNavigator.VisualStyle" />がシリアライズされるかどうかをテストします。
      </summary>
      <returns>
        <see cref="P:C1.Win.C1Input.C1DbNavigator.VisualStyle" />がシリアライズされる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ResetVisualStyleBaseStyle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeVisualStyleBaseStyle">
      <summary>これは内部使用専用です。</summary>
      <returns>VisualStyleBaseStyle がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnBackColorChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnForeColorChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeButtonSize">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ResetButtonSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeButtonTexts">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ResetButtonTexts">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeButtonToolTips">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ResetButtonToolTips">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeUIStrings">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ResetUIStrings">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeButtonCursor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ResetButtonCursor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnRightToLeftChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1DbNavigator.RightToLeftChanged" />イベントを発生させます。
      </summary>
      <param name="e">イベントデータオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.ClickButton(C1.Win.C1Input.NavigatorButtonEnum)">
      <summary>ナビゲータボタンに関連付けられたアクションを実行します。</summary>
      <param name="button">アクションが実行されるボタンです。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.SetDataBinding(System.Object,System.String)">
      <summary>実行時に DataSource および DataMember プロパティを指定します。</summary>
      <param name="dataSource">コントロールのバインド先のデータソースオブジェクトです。</param>
      <param name="dataMember">複数テーブルのデータソースに対して、コントロールの連結先となる特定のテーブルを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.WndProc(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.GetPreferredSize(System.Drawing.Size)">
      <summary>コントロールを配置できる四角形領域のサイズを取得します。</summary>
      <param name="proposedSize">コントロールのカスタムサイズ領域。</param>
      <returns>
        四角形の幅と高さを表す
        <see cref="T:System.Drawing.Size" />型の順序付きペア。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnPositionChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnBeforeAction(C1.Win.C1Input.NavigatorBeforeActionEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnAdding(C1.Win.C1Input.NavigatorAddingEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnDeleting(C1.Win.C1Input.NavigatorDeletingEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnEditing(C1.Win.C1Input.NavigatorEditingEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnUpdateData(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnRefreshData(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnButtonClick(C1.Win.C1Input.NavigatorButtonClickEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnError(C1.Win.C1Input.NavigatorErrorEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnButtonCursorChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1DbNavigator.OnEnabledChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.Text">
      <summary>位置テキストボックスの値を取得または設定します。</summary>
      <remarks>
        <para>位置テキストボックスが非表示の場合は、空の文字列が返されます。</para>
        <para>位置テキストボックスが非表示の場合に Text プロパティを設定しても、 何も起こりません。</para>
        <para>Text プロパティを変更すると、データソースの位置が変更されます。</para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.TextChanged">
      <summary>
        <see cref="P:C1.Win.C1Input.C1DbNavigator.Text">Text</see>プロパティの値が変更されたときに発生します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.VisualStyle">
      <summary>コントロールのビジュアルスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.AutoSize">
      <summary>ナビゲータボタンがカラービットマップを持つかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ColorButtons">
      <summary>ナビゲータボタンがカラービットマップを持つかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ColorWhenHover">
      <summary>True の場合は、ナビゲータボタン上にマウスが置かれると、ボタンにカラービットマップが表示されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.BorderStyle">
      <summary>ナビゲータの境界線のスタイルです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonStyle">
      <summary>ナビゲータボタンのスタイルです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.VerticalAlign">
      <summary>ナビゲータボタンの垂直方向の配置です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.VerticalIndent">
      <summary>境界線とボタンの間の垂直方向のマージンです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.HorizontalIndent">
      <summary>境界線とボタンの間の水平方向のマージンです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ImageList">
      <summary>ボタンの画像を強調しないで表示するときに使用する ImageList を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ImageListHighlight">
      <summary>ボタンの画像を強調した状態で表示するときに使用する ImageList を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ShowToolTips">
      <summary>ボタンにツールチップが表示されるかどうかを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ForeColor">
      <summary>このメンバは、Control.ForeColor をオーバーライドします。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.MoveDelayFirst">
      <summary>［次へ］/［前へ］ボタンを押してから自動スクロールが開始されるまでのミリ秒単位の遅延時間です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.MoveDelayNext">
      <summary>自動スクロールでの行移動のミリ秒単位の遅延時間です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.PageSize">
      <summary>ユーザーが PageUp/PageDown を押したときにスキップする行数です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.PositionVisible">
      <summary>編集可能な行の位置フィールドと行キャプションがナビゲータに表示されるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.TabStop">
      <summary>このメンバは、Control.TabStop をオーバーライドします。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.VisibleButtons">
      <summary>表示されるボタンを指定するフラグ列挙です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.EnabledButtons">
      <summary>有効になっているボタンを指定するフラグ列挙です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ConfirmDelete">
      <summary>レコードを削除する前に確認ダイアログを表示するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.CausesFormValidation">
      <summary>ボタンのクリックがナビゲータによって処理される前に、フォーカスがあるコントロールを検証する必要があるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.DataSource">
      <summary>コントロールのバインド先のデータソースオブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.DataMember">
      <summary>複数テーブルのデータソースに対して、コントロールの連結先となる特定のテーブルを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.RowCount">
      <summary>テーブルの行数を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.Position">
      <summary>テーブル内の現在の行の位置を取得または設定します（０から RowCount - 1 まで）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.CurrencyManager">
      <summary>コントロールによって移動が行われる CurrencyManager オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonSize">
      <summary>ナビゲータボタンのサイズです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonTextAlign">
      <summary>ナビゲータボタンの画像に対して、テキストがどのように表示されるか制御します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonTexts">
      <summary>ボタンに表示されるテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonToolTips">
      <summary>ナビゲータボタンのツールチップを定義する文字列コレクションです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.UIStrings">
      <summary>ユーザーインタフェース文字列のコレクションを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ErrorProvider">
      <summary>現在のデータ行のエラー状態を示すために使用される ErrorProvider オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonCursor">
      <summary>マウスがナビゲータボタン上にあるときに表示されるカーソル。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.VisualStyleChanged">
      <summary>VisualStyle プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.PositionChanged">
      <summary>位置が変化すると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.ItemChanged">
      <summary>現在の行が変更され、その一部のフィールドが変更されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.BeforeAction">
      <summary>ボタンがクリックされ、アクションが実行される前に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.Adding">
      <summary>［追加］ボタンが押されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.Deleting">
      <summary>［削除］ボタンが押されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.Editing">
      <summary>［編集］ボタンが押されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.UpdateData">
      <summary>［更新］ボタンが押されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.RefreshData">
      <summary>［リフレッシュ］ボタンが押されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.ButtonClick">
      <summary>ナビゲータボタンが押され、ボタンアクションが実行された後に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.Error">
      <summary>ボタンクリックで実行されたアクションで例外が生成されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1DbNavigator.ButtonCursorChanged">
      <summary>ButtonCursor プロパティの値が変化すると発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorButtonEnum">
      <summary>使用できるすべてのナビゲータボタンのリスト</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.First">
      <summary>［最初］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Previous">
      <summary>［前へ］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Next">
      <summary>［次へ］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Last">
      <summary>［最後］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Add">
      <summary>［追加］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Delete">
      <summary>［削除］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Edit">
      <summary>［編集］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Apply">
      <summary>［適用］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Cancel">
      <summary>［キャンセル］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Update">
      <summary>［更新］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Refresh">
      <summary>［リフレッシュ］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Position">
      <summary>位置テキストボックス</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorBeforeActionEventHandler">
      <summary>BeforeAction イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む NavigatorBeforeActionEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorBeforeActionEventArgs">
      <summary>BeforeAction イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorBeforeActionEventArgs.Button">
      <summary>クリックされたボタンです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorBeforeActionEventArgs.Index">
      <summary>データソース内の現在の行のインデックスです（［削除］ボタンと［編集］ボタンのみ）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorBeforeActionEventArgs.Cancel">
      <summary>この引数のデフォルトは False です。イベントコードでこれを True に設定した場合、ナビゲータコントロールは、ボタンに関連付けられた標準のアクションをスキップします。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorAddingEventHandler">
      <summary>追加イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む NavigatorAddingEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorAddingEventArgs">
      <summary>Adding イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorAddingEventArgs.Cancel">
      <summary>この引数のデフォルトは False です。イベントコードで True に設定すると、ナビゲータコントロールは、新しい行の追加を中断します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorDeletingEventHandler">
      <summary>Deleting イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む NavigatorDeletingEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorDeletingEventArgs">
      <summary>Deleting イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorDeletingEventArgs.Index">
      <summary>削除される行のインデックス。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorDeletingEventArgs.Cancel">
      <summary>この引数のデフォルトは False です。イベントコードで True に設定すると、ナビゲータコントロールは、削除を中断します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorEditingEventHandler">
      <summary>Editing イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む NavigatorEditingEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorEditingEventArgs">
      <summary>Editing イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorEditingEventArgs.Index">
      <summary>編集中の行のインデックスです。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorButtonClickEventHandler">
      <summary>ButtonClick イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む NavigatorButtonClickEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorButtonClickEventArgs">
      <summary>ButtonClick イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorButtonClickEventArgs.Button">
      <summary>クリックされたボタンです。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorErrorEventHandler">
      <summary>エラーイベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む NavigatorErrorEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorErrorEventArgs">
      <summary>Error イベントにイベントデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.Button">
      <summary>クリックされた C1DbNavigator ボタンです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.Exception">
      <summary>ボタンアクションの実行中に発生した例外です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.ShowErrorMessage">
      <summary>この引数は、デフォルトで True に設定されます。これがイベントコードで False に設定された場合、標準のメッセージボックスは表示されません。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.ErrorMessage">
      <summary>標準のメッセージボックスに表示されるエラーメッセージです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.ErrorMessageCaption">
      <summary>標準のメッセージボックスのキャプションです。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorButtonStyleEnum">
      <summary>C1DbNavigator.ButtonStyle プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonStyleEnum.Flat">
      <summary>「マウスポインタの移動」を示すフラットボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonStyleEnum.Standard">
      <summary>標準の 3D ボタン。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorVerticalAlignEnum">
      <summary>C1DbNavigator.VerticalAlign プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorVerticalAlignEnum.Top">
      <summary>ボタンは、コントロールの上に揃えられます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorVerticalAlignEnum.Middle">
      <summary>ボタンは、コントロールの中央に揃えられます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorVerticalAlignEnum.Bottom">
      <summary>ボタンは、コントロールの下に揃えられます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorButtonTextAlignEnum">
      <summary>C1DbNavigator.ButtonTextAlign プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonTextAlignEnum.Right">
      <summary>テキストは画像の右に表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonTextAlignEnum.Underneath">
      <summary>テキストは画像の下に表示されます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NavigatorButtonFlags">
      <summary>C1DbNavigator.VisibleButtons プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.None">
      <summary>ボタンなし。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.First">
      <summary>最初の行に移動します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Previous">
      <summary>前の行に移動します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Next">
      <summary>次の行に移動します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Last">
      <summary>最後の行に移動します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Add">
      <summary>テーブルに新しい行を追加します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Delete">
      <summary>現在の行を削除します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Edit">
      <summary>Editing イベントを発生させます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Apply">
      <summary>現在の行の編集モードを終了します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Cancel">
      <summary>現在の行の変更をキャンセルします（元に戻す）。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Update">
      <summary>UpdateData イベントを発生させます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Refresh">
      <summary>RefreshData イベントを発生させます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Navigation">
      <summary>［最初］+［前へ］+［次へ］+［最後］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NavigatorButtonFlags.All">
      <summary>すべてのボタン。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DropDownControlButtonFlags">
      <summary>C1DropDownControl.VisibleButtons プロパティで使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.None">
      <summary>ボタンなしで表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.UpDown">
      <summary>アップ/ダウンボタンを表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.DropDown">
      <summary>ドロップダウンボタンを表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.Modal">
      <summary>モーダルダイアログを起動するボタンを表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.Custom">
      <summary>カスタムボタンを表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.All">
      <summary>すべてのボタンを表示します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.UpDownButtonClickEventHandler">
      <summary>UpDownButtonClick イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む UpDownButtonClickEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.UpDownButtonClickEventArgs">
      <summary>UpDownButtonClick イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.UpDownButtonClickEventArgs.Delta">
      <summary>アップボタンが押された場合は１に、ダウンボタンが押された場合は -1 に設定されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.UpDownButtonClickEventArgs.Done">
      <summary>ユーザーの UpDownButtonClick イベントハンドラで true に設定されます。組み込みの処理は何も実行されません。これを使用して、ユーザーはボタンのデフォルトの動作をオーバーライドできます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DropDownClosedEventArgs">
      <summary>DropDownClosed イベントのデータを提供します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownClosedEventArgs.Selected">
      <summary>ドロップダウンダイアログで値が選択されている場合は True を返します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownClosedEventArgs.#ctor(System.Boolean)">
      <summary>DropDownClosedEventArgs クラスの新しいインスタンスを初期化します。</summary>
      <param name="selected"></param>
    </member>
    <member name="T:C1.Win.C1Input.DropDownClosedEventHandler">
      <summary>DropDownClosed イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース</param>
      <param name="e">イベントデータを含む DropDownClosedEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.ButtonImages">
      <summary>C1DropDownControl ボタンの画像</summary>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.Reset">
      <summary>すべてのカスタム画像をクリアし、C1DropDownControl ボタンの標準画像を返します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.HasImage">
      <summary>カスタム画像が割り当てられている場合は True を返します</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeUpImage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ResetUpImage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeDownImage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ResetDownImage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeDropImage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ResetDropImage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeModalImage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ResetModalImage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeCustomImage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ResetCustomImage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ButtonImages.UpImage">
      <summary>[アップ] ボタンの画像</summary>
    </member>
    <member name="P:C1.Win.C1Input.ButtonImages.DownImage">
      <summary>[ダウン] ボタンの画像</summary>
    </member>
    <member name="P:C1.Win.C1Input.ButtonImages.DropImage">
      <summary>[ドロップダウン] ボタンの画像</summary>
    </member>
    <member name="P:C1.Win.C1Input.ButtonImages.ModalImage">
      <summary>[モーダル] ボタンの画像</summary>
    </member>
    <member name="P:C1.Win.C1Input.ButtonImages.CustomImage">
      <summary>[カスタム] ボタンの画像</summary>
    </member>
    <member name="T:C1.Win.C1Input.ButtonImages.ButtonImagesTypeConverter">
      <summary>ButtonImages の TypeConverter クラス</summary>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ButtonImagesTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ButtonImages.ButtonImagesTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="culture"></param>
      <param name="value"></param>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Input.ButtonImages.ButtonImagesTypeConverter.Text">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ErrorActionEnum">
      <summary>ErrorInfo.ErrorAction プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorActionEnum.None">
      <summary>コントロールの値は、ユーザーが入力したとおりに残ります。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorActionEnum.SetValueOnError">
      <summary>コントロールの値は、ValueOnError に設定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorActionEnum.ResetValue">
      <summary>コントロールの値は、編集モードに入る前のコントロールの値にリセットされます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorActionEnum.ThrowException">
      <summary>コントロールの値は、編集モードに入る前のコントロールの値にリセットされ、例外が生成されます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ErrorInfo">
      <summary>エラー処理に影響する設定です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ErrorInfo.ShouldSerializeValueOnError">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ErrorInfo.Reset">
      <summary>基本コントロールの ErrorInfo プロパティ全体をリセットします。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.BeepOnError">
      <summary>True の場合、コントロールは、エラーを通知するビープ音を鳴らします。デフォルト：False。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.ShowErrorMessage">
      <summary>True の場合は（デフォルト）、標準のエラーメッセージが表示されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.ErrorMessage">
      <summary>標準のメッセージボックスや例外に表示されるエラーメッセージです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.ErrorMessageCaption">
      <summary>エラーメッセージボックスのタイトルバーに表示するテキストです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.ErrorAction">
      <summary>エラーの発生時にコントロールの値に対して実行するアクションを指定する列挙値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.CanLoseFocus">
      <summary>エラーの後にコントロールがフォーカスを失うことができるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.ValueOnError">
      <summary>ErrorAction = SetValueOnError の場合に、コントロールのリセットに使用される値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.ValueOnErrorIsDbNull">
      <summary>ValueOnError を DbNull に設定するために使用されるブール値プロパティです（設計時のみ必要）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.ErrorProvider">
      <summary>コントロールのエラー状態を示すために使用される ErrorProvider オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.C1SuperErrorProvider">
      <summary>コントロールのエラー状態を示すために使用される C1SuperErrorProvider オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.InnerException">
      <summary>エラーの原因になった元の例外オブジェクトを返す、実行時のみの読み取り専用プロパティです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ErrorInfo.DataType">
      <summary>Value プロパティの型です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.FormatErrorEventHandler">
      <summary>FormatError イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む FormatErrorEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.FormatErrorEventArgs">
      <summary>FormatError イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatErrorEventArgs.Value">
      <summary>書式設定のためのソース値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatErrorEventArgs.Target">
      <summary>書式設定のターゲットです（ForEdit または ForDisplay）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatErrorEventArgs.Text">
      <summary>コントロールに表示するテキストです。FormatError イベント内のコードで、書式設定エラーの発生時に コントロールに表示するテキストをこの引数に設定できます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatErrorEventArgs.FormatInfo">
      <summary>イベントを発生させた FormatInfo オブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatErrorEventArgs.ErrorMessage">
      <summary>ErrorInfo.ErrorProvider プロパティが設定されている場合に、ErrorProvider アイコンにツールチップとして表示されるエラーの説明。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ErrorReasonEnum">
      <summary>ValidationErrorEventArgs.Reason プロパティと ValidationException.Reason プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorReasonEnum.NoErrors">
      <summary>すべての検証チェックに成功しました。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorReasonEnum.EditMaskError">
      <summary>値が編集マスクに一致しません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorReasonEnum.PreValidationError">
      <summary>解析前に（PreValidation で）値が拒否されました。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorReasonEnum.ParsingError">
      <summary>解析に失敗しました。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorReasonEnum.PostValidationError">
      <summary>解析後に（PostValidation で）値が拒否されました。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ErrorReasonEnum.DataSourceError">
      <summary>値はデータソースによって拒否され、データソースのフィールドをこの値に設定できませんでした。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ValidationErrorEventHandler">
      <summary>ValidationError イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む ValidationErrorEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.ValidationErrorEventArgs">
      <summary>ValidationError イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValidationErrorEventArgs.Reason">
      <summary>エラーが検出された検証段階です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValidationErrorEventArgs.Text">
      <summary>エラーの原因になった入力テキストです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValidationErrorEventArgs.Value">
      <summary>Reason = ErrorReasonEnum.PostValidationError の場合、これはエラーの原因になった値です。そうでない場合、このプロパティは null または DBNull です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValidationErrorEventArgs.ErrorInfo">
      <summary>エラー情報です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ValidationException">
      <summary>ValidationErrorEventArgs.ErrorInfo が ErrorActionEnum.ThrowException に設定されている場合に、ValidationError イベントに続く例外。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValidationException.Sender">
      <summary>例外を発生させたコントロールです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValidationException.Reason">
      <summary>エラーが検出された検証段階です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValidationException.Text">
      <summary>エラーの原因になった入力テキストです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValidationException.Value">
      <summary>エラーの原因になった型付きの値です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DataSourceException">
      <summary>コントロールの Value プロパティが設定されたが、新しい値がデータソースによって拒否された場合に C1Input によって生成される例外。 データフィールドへの値の設定は、例外をスローしたデータソースによってキャンセルされます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DataSourceException.Sender">
      <summary>例外の原因になったコントロールです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DataSourceException.Value">
      <summary>例外の原因になったコントロールの現在の値です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.FormatInfoInheritFlags">
      <summary>FormatInfo.Inherit プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.None">
      <summary>コントロールからプロパティがまったく継承されないことを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.FormatType">
      <summary>コントロールから FormatType プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.CustomFormat">
      <summary>コントロールから CustomFormat プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.NullText">
      <summary>コントロールから NullText プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.EmptyAsNull">
      <summary>コントロールから EmptyAsNull プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.TrimStart">
      <summary>コントロールから TrimStart プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.TrimEnd">
      <summary>コントロールから TrimEnd プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.All">
      <summary>FormatType、CustomFormat、NullText、EmptyAsNull、TrimStart、TrimEnd の各プロパティの値がコントロールから継承されることを示します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.FormatTargetEnum">
      <summary>FormatEventArgs.Target プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTargetEnum.ForDisplay">
      <summary>コントロールが編集モードではない場合に、Formatting（または Formatted）イベントが呼び出されました。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTargetEnum.ForEdit">
      <summary>コントロールが編集モードの場合に、Formatting（または Formatted）イベントが呼び出されました。</summary>
    </member>
    <member name="T:C1.Win.C1Input.FormatEventHandler">
      <summary>Formatting イベントまたは Formatted イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む FormatEventArgs オブジェクト</param>
    </member>
    <member name="T:C1.Win.C1Input.FormatEventArgs">
      <summary>Formatting イベントまたは Formatted イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatEventArgs.Value">
      <summary>書式設定のためのソース値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatEventArgs.Target">
      <summary>書式設定のターゲットです（ForEdit または ForDisplay）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatEventArgs.Text">
      <summary>生成される文字列のための出力パラメータ（Formatting の場合）、または書式設定される文字列のための入力パラメータ（Formatted の場合）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatEventArgs.FormatInfo">
      <summary>イベントを発生させた FormatInfo オブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatEventArgs.ErrorMessage">
      <summary>Succeeded が False に設定されている場合にエラーの説明を指定するための出力パラメータです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatEventArgs.Succeeded">
      <summary>Formatting の結果（Formatting 内のイベントコードで割り当てられる）。デフォルト：True</summary>
    </member>
    <member name="T:C1.Win.C1Input.FormatInfo">
      <summary>データを文字列に変換するときのデータ書式設定の設定です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeFormatType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ResetFormatType">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeCustomFormat">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ResetCustomFormat">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeNullText">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ResetNullText">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeEmptyAsNull">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ResetEmptyAsNull">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeTrimStart">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ResetTrimStart">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeTrimEnd">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.ResetTrimEnd">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.Reset">
      <summary>基本コントロールの FormatInfo プロパティ全体をリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.Format(System.Object)">
      <summary>値を書式設定して文字列に変換します。</summary>
      <param name="value">文字列に変換する型付きの値。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.FormatInfo.Format(System.Object,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
      <summary>値を書式設定して文字列に変換します。</summary>
      <param name="value">文字列に変換する型付きの値です。</param>
      <param name="formatType">変換に使用される書式設定メソッドまたは指定子です。</param>
      <param name="culture">変換に使用されるカルチャです。</param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Input.FormatInfo.Inherit">
      <summary>ホストコントロールのプロパティから FormatInfo プロパティが継承されるかどうかを管理します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatInfo.FormatType">
      <summary>標準 .NET 書式指定子、カスタム書式設定、プログラム書式設定など、書式設定方法を指定する列挙値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatInfo.CustomFormat">
      <summary>FormatType = FormatTypeEnum.CustomFormat の場合に使用されるカスタム書式指定子です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatInfo.NullText">
      <summary>DbNull 値を表す文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatInfo.EmptyAsNull">
      <summary>True の場合、空の文字列は null 値（DbNull）として解釈されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatInfo.TrimStart">
      <summary>True の場合は、先頭のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatInfo.TrimEnd">
      <summary>True の場合は、末尾のスペースが削除されます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.MaskInfoInheritFlags">
      <summary>MaskInfo.Inherit プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.None">
      <summary>コントロールからプロパティがまったく継承されないことを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.CaseSensitive">
      <summary>コントロールから CaseSensitive プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.EmptyAsNull">
      <summary>コントロールから EmptyAsNull プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.ErrorMessage">
      <summary>コントロールから ErrorMessage プロパティが継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.All">
      <summary>コントロールからすべてのプロパティが継承されることを示します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ShowLiteralsEnum">
      <summary>MaskInfo.ShowLiterals プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ShowLiteralsEnum.ShowAlways">
      <summary>編集が始まるとマスク全体が表示されます（空のスペースは PromptChar で埋まる）。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ShowLiteralsEnum.FreeFormatEntry">
      <summary>終了時にマスクが検証されます（リテラルやプロンプト文字は自動的に表示されない）。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ShowLiteralsEnum.WhenNextStarted">
      <summary>リテラルは、ユーザーがリテラルの後のフィールドの最初の文字を入力した後に挿入されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ShowLiteralsEnum.WhenPrevFilled">
      <summary>入力マスクの後のリテラルは、ユーザーが現在のフィールドに最後の文字を入力した後に挿入されます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.MaskInfo">
      <summary>編集マスクの設定が入っています。</summary>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeEditMask">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeCaseSensitive">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ResetCaseSensitive">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeEmptyAsNull">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ResetEmptyAsNull">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeErrorMessage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ResetErrorMessage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeCustomPlaceholders">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ResetCustomPlaceholders">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.IsMaskedMode">
      <summary>EditMask が空でなく、コントロールが編集モードの場合は、True を返します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.Reset">
      <summary>基本コントロールの MaskInfo プロパティ全体をリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.ResetContent">
      <summary>テキストをリセットして DBNull 値を表す文字列にします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.GetDisplayText(System.String,System.Boolean)">
      <summary>編集マスクを使って表示用に書式設定された文字列を返します。</summary>
      <param name="content">ユーザーによって入力された文字を含む文字列です。空白のまま残された（スキップされた）オプションの位置を含みます。</param>
      <param name="skipBlanks">True に設定した場合は、結果から空白位置が省略されます。False に設定した場合、生成されるテキストは、空白位置に PromptChar が入ります</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.GetStoredText(System.String)">
      <summary>SaveLiterals、SaveBlanks、StoredEmptyChar の各プロパティの現在の値に従って、データベースに格納される文字列を返します。</summary>
      <param name="content">ユーザーによって入力された文字を含む文字列です。空白のまま残された（スキップされた）オプションの位置を含みます。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.GetContent(System.String,System.Boolean,System.Boolean,System.Char)">
      <summary>ユーザーによって入力された文字を含む文字列を返します。空白のまま残された（スキップされた）オプションの位置を含みます。</summary>
      <param name="text">解析するテキスト。</param>
      <param name="textContainsLiterals">MaskInfo.SaveLiterals プロパティと同じです。</param>
      <param name="textContainsBlanks">MaskInfo.SaveBlanks プロパティと同じです。</param>
      <param name="blankCharacter">MaskInfo.StoredEmptyChar プロパティと同じです。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.MaskInfo.IsValid">
      <summary>入力文字列が編集マスクに対して有効な場合は、True を返します。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.EditMask">
      <summary>ユーザー入力を制限する編集マスク文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.Inherit">
      <summary>ホストコントロールのプロパティから MaskInfo プロパティが継承されるかどうかを管理します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.CaseSensitive">
      <summary>マスクリテラルとの比較で大文字小文字が区別される場合は True、そうでない場合は False。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.CopyWithLiterals">
      <summary>True の場合、クリップボードにコピーされるテキストにはリテラルが含まれます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.EmptyAsNull">
      <summary>True の場合、空の文字列は null 値（DbNull）として解釈されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.ErrorMessage">
      <summary>標準のメッセージボックスや例外が発生した場合に表示されるエラーメッセージ。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.AutoTabWhenFilled">
      <summary>True の場合は、マスクが入力されると、フォーカスが次のコントロールに自動的に移動します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.PromptChar">
      <summary>編集モードで空のマスク位置に表示される文字。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.SkipOptional">
      <summary>True の場合は（デフォルト）、文字を入力できる最初の位置までオプションのマスク位置が自動的にスキップされます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.SaveLiterals">
      <summary>True の場合は（デフォルト）、格納されたテキストにリテラルが含まれます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.SaveBlanks">
      <summary>True の場合、格納されたテキストには、空白位置に StoredEmptyChar が入ります。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.StoredEmptyChar">
      <summary>空のマスク位置に格納される文字です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.ShowLiterals">
      <summary>リテラル表示メソッドです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.CustomPlaceholders">
      <summary>ユーザー定義のマスク文字のコレクションです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.EditablePositionCount">
      <summary>編集マスク内で編集可能な位置の数を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.Content">
      <summary>ユーザーによって入力されたリテラル以外のテキストです（マスクリテラルは削除される）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.EffectiveText">
      <summary>リテラルを含み、空白を含まない、読み取り可能な書式のテキストです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.StoredContent">
      <summary>ユーザー入力文字列から取得されて格納される文字列です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.CharCategory">
      <summary>キーボード入力をフィルタ処理する規則を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.SingleByte">
      <summary>１バイト文字だけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.DoubleByte">
      <summary>２バイト文字だけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.Letter">
      <summary>文字だけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.Number">
      <summary>数字だけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.Symbol">
      <summary>記号だけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.UpperCase">
      <summary>大文字だけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.LowerCase">
      <summary>小文字だけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.Katakana">
      <summary>カタカナだけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.Hiragana">
      <summary>ひらがなだけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.BigKana">
      <summary>大文字のかなだけが許可されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CharCategory.AutoConvert">
      <summary>可能な場合は自動変換。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NumericInputKeyFlags">
      <summary>C1TextBox.NumericInputKeys プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.None">
      <summary>入力キーが使用されていないことを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.F2">
      <summary>F2 で負の無限（-Infinity）を入力することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.F3">
      <summary>F3 で正の無限（+Infinity）を入力することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.F4">
      <summary>F4 で「数ではない」値（NaN）を入力することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.F9">
      <summary>F9 で、表示されている数の符号を反転することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.Minus">
      <summary>「-」で、表示されている数を負の数にすることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.Plus">
      <summary>「+」で、表示されている数を正の数にすることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.Decimal">
      <summary>小数点キーで、カルチャ設定に関係なく小数点を入力することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.X">
      <summary>X キーで、指数表記の指数部の入力を開始することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.Standard">
      <summary>この値は、F9、Minus、Plus、Decimal、および X の組み合わせです。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumericInputKeyFlags.All">
      <summary>この値は、すべての列挙値の組み合わせです。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ParseInfoInheritFlags">
      <summary>ParseInfo.Inherit プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.None">
      <summary>コントロールからプロパティがまったく継承されないことを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.CaseSensitive">
      <summary>コントロールから CaseSensitive プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.FormatType">
      <summary>コントロールから FormatType プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.CustomFormat">
      <summary>コントロールから CustomFormat プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.NullText">
      <summary>コントロールから NullText プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.EmptyAsNull">
      <summary>コントロールから EmptyAsNull プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.ErrorMessage">
      <summary>コントロールから ErrorMessage プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.TrimStart">
      <summary>コントロールから TrimStart プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.TrimEnd">
      <summary>コントロールから TrimEnd プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.All">
      <summary>コントロールからすべてのプロパティが継承されることを示します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NumberStyleFlags">
      <summary>ParseInfo.NumberStyle プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.None">
      <summary>ビットスタイルが何も許可されていないことを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowCurrencySymbol">
      <summary>数値文字列に通貨記号が入っている場合は通貨として解釈され、そうでない場合は数字として解釈されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowDecimalPoint">
      <summary>数値文字列に小数点を付けることができることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowExponent">
      <summary>数値文字列を指数表記できることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowHexSpecifier">
      <summary>数値文字列に 16 進数であることを表記できることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowLeadingSign">
      <summary>数値文字列の先頭に符号を付けることができることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowLeadingWhite">
      <summary>先頭のホワイトスペース文字が解析中に無視されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowParentheses">
      <summary>数値文字列を１対のかっこで囲むことができることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowThousands">
      <summary>数値文字列に桁区切り文字を付けることができることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowTrailingSign">
      <summary>数値文字列の末尾に符号を付けることができることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowTrailingWhite">
      <summary>末尾のホワイトスペース文字が解析中に無視されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.Any">
      <summary>すべての AllowXXX ビットスタイルが使用されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.Currency">
      <summary>AllowExponent と AllowHexSpecifier 以外のすべてのスタイルを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.Float">
      <summary>AllowLeadingWhite、AllowTrailingWhite、AllowLeadingSign、 AllowDecimalPoint、AllowExponent の各スタイルが使用されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.HexNumber">
      <summary>AllowLeadingWhite、AllowTrailingWhite、AllowHexSpecifier の各スタイルが使用されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.Integer">
      <summary>AllowLeadingWhite、AllowTrailingWhite、AllowLeadingSign の各スタイルが使用されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.NumberStyleFlags.Number">
      <summary>AllowLeadingWhite、AllowTrailingWhite、AllowLeadingSign、 AllowTrailingSign、AllowDecimalPoint、AllowThousands の各スタイルが使用されることを示します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DateTimeStyleFlags">
      <summary>ParseInfo.DateTimeStyle プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DateTimeStyleFlags.None">
      <summary>デフォルトの書式設定オプションを使用する必要があることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DateTimeStyleFlags.AllowInnerWhite">
      <summary>解析中に文字列の途中にある余分なホワイトスペース文字を無視することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DateTimeStyleFlags.AllowLeadingWhite">
      <summary>解析中に先頭にあるホワイトスペース文字を無視することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DateTimeStyleFlags.AllowTrailingWhite">
      <summary>解析中に末尾にあるホワイトスペース文字を無視することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DateTimeStyleFlags.AllowWhiteSpaces">
      <summary>解析中に文字列内の任意の場所にある余分なホワイトスペース文字を無視することを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DateTimeStyleFlags.NoCurrentDateDefault">
      <summary>解析する文字列に時間だけがあり、日付がない場合に、解析メソッドがこれをグレゴリオ暦の１年１月１日とみなすことを示します。 この値を使用しない場合は、現在の日付とみなされます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ParseEventHandler">
      <summary>Parsing イベントまたは Parsed イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む ParseEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.ParseEventArgs">
      <summary>Parsing イベントまたは Parsed イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseEventArgs.Text">
      <summary>解析するソース文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseEventArgs.DestinationType">
      <summary>文字列の変換先のデータ型です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseEventArgs.Succeeded">
      <summary>Parse の結果（Parsing 内のイベントコードで割り当てられる）。デフォルト：True</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseEventArgs.Value">
      <summary>結果の保存先のプロパティ（Parsing の場合）、または値の取得元のプロパティ（Parsed の場合）です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseEventArgs.ErrorInfo">
      <summary>解析に失敗した場合のエラー情報です。Parsing 内のイベントコードで設定できます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseEventArgs.ParseInfo">
      <summary>イベントを発生させた ParseInfo オブジェクトです。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ParseInfo">
      <summary>解析（必要なデータ型への文字列の変換）に影響する設定が入っています。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeCaseSensitive">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ResetCaseSensitive">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeFormatType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ResetFormatType">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeCustomFormat">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ResetCustomFormat">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeNullText">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ResetNullText">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeEmptyAsNull">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ResetEmptyAsNull">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeErrorMessage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ResetErrorMessage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeTrimStart">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ResetTrimStart">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeTrimEnd">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ResetTrimEnd">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.Reset">
      <summary>基本コントロールの ParseInfo プロパティ全体をリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.IsTextDbNull(System.String,System.Globalization.CultureInfo)">
      <summary>引数が Null 値（DBNull）を表す場合は、True を返します。</summary>
      <param name="text">解析する文字列です。</param>
      <param name="culture">解析で使用されるカルチャです。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ParseFixed(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
      <summary>固定数値書式を使用して、テキストを Decimal 値に変換します。</summary>
      <param name="text">解析する文字列です。</param>
      <param name="formatType">解析で使用される書式タイプです。</param>
      <param name="culture">解析で使用されるカルチャです。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ParseFloat(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
      <summary>浮動数値書式を使用して、テキストを Double 値に変換します。</summary>
      <param name="text">解析する文字列です。</param>
      <param name="formatType">解析で使用される書式タイプです。</param>
      <param name="culture">解析で使用されるカルチャです。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ParseInteger(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
      <summary>整数値書式を使用して、テキストを Int64 値に変換します。</summary>
      <param name="text"></param>
      <param name="formatType"></param>
      <param name="culture"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ParseBoolean(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
      <summary>テキストを指定されたブール値に変換します。</summary>
      <param name="text">解析する文字列です。</param>
      <param name="formatType">解析で使用される書式タイプです。</param>
      <param name="culture">解析で使用されるカルチャです。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.ParseDateTime(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
      <summary>DateTime 書式のいずれかを使用して、テキストを値に変換します。</summary>
      <param name="text">解析する文字列です。</param>
      <param name="formatType">解析で使用される書式タイプです。</param>
      <param name="culture">解析で使用されるカルチャです。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ParseInfo.Parse(System.String,System.Type,System.Object@,C1.Win.C1Input.ErrorInfo)">
      <summary>テキストを指定されたデータ型に変換します。</summary>
      <param name="text">解析する文字列です。</param>
      <param name="destinationType">文字列の変換先の型です。</param>
      <param name="result">変換結果です。</param>
      <param name="errorInfo">エラーが発生した場合にエラー情報を説明するオブジェクトです。</param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.Inherit">
      <summary>ホストコントロールのプロパティから ParseInfo プロパティが継承されるかどうかを管理します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.CaseSensitive">
      <summary>文字列比較で、大文字小文字を区別する場合は True、そうでない場合は False です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.FormatType">
      <summary>解析に使用される書式です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.CustomFormat">
      <summary>カスタム書式指定子（解析時に DateTime 型と Boolean 型でのみ使用される）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.NullText">
      <summary>DbNull 値を表す文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.EmptyAsNull">
      <summary>True の場合、空の文字列は null 値（DbNull）として解釈されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.ErrorMessage">
      <summary>標準のメッセージボックスや例外に表示されるエラーメッセージです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.TrimStart">
      <summary>True の場合は、解析前に先頭のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.TrimEnd">
      <summary>True の場合は、解析前に末尾のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.NumberStyle">
      <summary>数値を表す入力文字列で許可されるスタイル（フラグ）を指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ParseInfo.DateTimeStyle">
      <summary>日付/時刻を表す入力文字列で許可されるスタイル（フラグ）を指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.PostValidationInheritFlags">
      <summary>PostValidation.Inherit プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PostValidationInheritFlags.None">
      <summary>コントロールからプロパティがまったく継承されないことを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PostValidationInheritFlags.CaseSensitive">
      <summary>コントロールから CaseSensitive プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PostValidationInheritFlags.ErrorMessage">
      <summary>コントロールから ErrorMessage プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PostValidationInheritFlags.All">
      <summary>コントロールからすべてのプロパティが継承されることを示します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.PostValidationTypeEnum">
      <summary>PostValidation.Validation プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PostValidationTypeEnum.ValuesAndIntervals">
      <summary>Values と Intervals を使用する検証。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PostValidationTypeEnum.PostValidatingEvent">
      <summary>PostValidating イベントを使用します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.PostValidationEventHandler">
      <summary>PostValidating イベントまたは PostValidated イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む PostValidationEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.PostValidationEventArgs">
      <summary>PostValidating イベントまたは PostValidated イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidationEventArgs.Value">
      <summary>検証する値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidationEventArgs.PostValidation">
      <summary>イベントを発生させた PostValidation オブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidationEventArgs.ErrorInfo">
      <summary>検証が失敗だった場合のエラー情報です。PostValidating 内のイベントコードで設定できます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidationEventArgs.Succeeded">
      <summary>検証結果です（PostValidating 内のイベントコードで割り当てられる）。デフォルト：True</summary>
    </member>
    <member name="T:C1.Win.C1Input.ValueInterval">
      <summary>事後検証で使用できる値の範囲のコレクション内の１つの範囲です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ValueInterval.#ctor">
      <summary>ValueInterval クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ValueInterval.#ctor(System.Object,System.Object,System.Boolean,System.Boolean)">
      <summary>ValueInterval コンストラクタ。</summary>
      <param name="minValue">MinValue プロパティ値。</param>
      <param name="maxValue">MaxValue プロパティ値。</param>
      <param name="includeMin">IncludeMin プロパティ値。</param>
      <param name="includeMax">IncludeMax プロパティ値。</param>
    </member>
    <member name="M:C1.Win.C1Input.ValueInterval.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>ValueInterval クラスの新しいインスタンスを初期化します。</summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:C1.Win.C1Input.ValueInterval.ShouldSerializeMinValue">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ValueInterval.ShouldSerializeMaxValue">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Input.ValueInterval.DataType">
      <summary>上限および下限の型です（コントロールの DataType から取得）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValueInterval.MinValue">
      <summary>下限です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValueInterval.MaxValue">
      <summary>上限です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValueInterval.UseMinValue">
      <summary>False の場合（デフォルト）、下限は負の無限大です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValueInterval.UseMaxValue">
      <summary>False の場合（デフォルト）、上限は正の無限大です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValueInterval.IncludeMin">
      <summary>True の場合は（デフォルト）、下限の値も含まれます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.ValueInterval.IncludeMax">
      <summary>True の場合は（デフォルト）、上限の値も含まれます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ValueIntervalCollection">
      <summary>PostValidation オブジェクトによって使用される ValueInterval オブジェクトのコレクションです。 このコレクションは、Validation = PostValidationTypeEnum.ValuesAndIntervals の場合、 またはユーザーが ValidateValuesAndIntervals メソッドを呼び出した場合に使用されます。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.AddRange(C1.Win.C1Input.ValueInterval[])">
      <summary>配列の要素をコレクションの末尾に追加します。</summary>
      <param name="c">コレクションの末尾に追加する要素を含む配列。</param>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.Add(C1.Win.C1Input.ValueInterval)">
      <summary>コレクションに新しい値範囲を追加します。</summary>
      <param name="vi">追加する ValueInterval。</param>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.Insert(System.Int32,C1.Win.C1Input.ValueInterval)">
      <summary>新しい値範囲をコレクションの指定された位置に挿入します。</summary>
      <param name="index">ValueInterval が挿入される位置の０から始まるインデックスです。</param>
      <param name="vi">挿入する ValueInterval。</param>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.OnInsert(System.Int32,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="index"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="index"></param>
      <param name="oldValue"></param>
      <param name="newValue"></param>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.Contains(C1.Win.C1Input.ValueInterval)">
      <summary>コレクションに特定の値範囲が含まれる場合は True、そうでない場合は False を返します。</summary>
      <param name="vi">コレクション内で検索する ValueInterval。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.IndexOf(C1.Win.C1Input.ValueInterval)">
      <summary>コレクション内の特定の値範囲のインデックスを決定します。項目が見つからない場合は、-1 を返します。</summary>
      <param name="vi">コレクション内で検索する ValueInterval。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.Remove(C1.Win.C1Input.ValueInterval)">
      <summary>コレクションから特定の値範囲を削除します。</summary>
      <param name="vi">コレクションから削除する ValueInterval。</param>
    </member>
    <member name="M:C1.Win.C1Input.ValueIntervalCollection.CopyTo(C1.Win.C1Input.ValueInterval[],System.Int32)">
      <summary>コレクションの要素を特定の配列インデックス位置から順に配列にコピーします。</summary>
      <param name="array">コレクションからコピーされる要素のコピー先の配列です。</param>
      <param name="index">コピーを開始する位置の０から始まる配列のインデックス。</param>
    </member>
    <member name="P:C1.Win.C1Input.ValueIntervalCollection.Item(System.Int32)">
      <summary>指定されたインデックスにあるコレクション要素を取得します。</summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Input.PostValidation">
      <summary>入力文字列が DataType に変換された後に、解析後の型付きの値を検証します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeCaseSensitive">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.ResetCaseSensitive">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeErrorMessage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.ResetErrorMessage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeValues">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeValuesExcluded">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeIntervals">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.Reset">
      <summary>基本コントロールの PostValidation プロパティ全体をリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.ValidateValuesAndIntervals(System.Object,C1.Win.C1Input.ErrorInfo)">
      <summary>値を Values、ValuesExcluded、および Intervals のコレクションと照合して検証を実行します。</summary>
      <param name="value">検証する値です。</param>
      <param name="errorInfo">失敗した場合に設定されるエラー情報です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PostValidation.Validate(System.Object,C1.Win.C1Input.ErrorInfo)">
      <summary>PostValidation オブジェクトの現在の設定を使って検証を実行します。検証が成功だった場合は、True を返します。</summary>
      <param name="value">検証する値です。</param>
      <param name="errorInfo">失敗した場合に設定されるエラー情報です。</param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Input.PostValidation.Validation">
      <summary>検証メソッドです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidation.AllowDbNull">
      <summary>コントロールに DbNull 値を入力できるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidation.Inherit">
      <summary>ホストコントロールのプロパティから PostValidation プロパティが継承されるかどうかを管理します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidation.CaseSensitive">
      <summary>文字列比較で、大文字小文字を区別する場合は True、そうでない場合は False です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidation.ErrorMessage">
      <summary>標準のメッセージボックスや例外に表示されるエラーメッセージです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidation.Values">
      <summary>入力値のマッチングに使用される定義済みの値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidation.ValuesExcluded">
      <summary>入力値として許可されていない値のリストです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PostValidation.Intervals">
      <summary>範囲のコレクションです。入力値は、これらの範囲のいずれかに属している必要があります。</summary>
    </member>
    <member name="T:C1.Win.C1Input.PreValidationInheritFlags">
      <summary>PreValidation.Inherit プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationInheritFlags.None">
      <summary>コントロールからプロパティがまったく継承されないことを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationInheritFlags.CaseSensitive">
      <summary>コントロールから CaseSensitive プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationInheritFlags.ErrorMessage">
      <summary>コントロールから ErrorMessage プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationInheritFlags.TrimStart">
      <summary>コントロールから TrimStart プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationInheritFlags.TrimEnd">
      <summary>コントロールから TrimEnd プロパティの値が継承されることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationInheritFlags.All">
      <summary>コントロールからすべてのプロパティが継承されることを示します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.PreValidationTypeEnum">
      <summary>PreValidation.Validation プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationTypeEnum.ExactList">
      <summary>PatternString プロパティは、ItemSeparator で区切られた有効な値のリストです。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationTypeEnum.PreValidatingEvent">
      <summary>PreValidating イベントを使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationTypeEnum.Wildcards">
      <summary>PatternString プロパティは、ItemSeparator で区切られたワイルドカードパターンのリストです。</summary>
    </member>
    <member name="F:C1.Win.C1Input.PreValidationTypeEnum.RegexPattern">
      <summary>PatternString プロパティは正規表現です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.RegexOptionFlags">
      <summary>PreValidation.RegexOptions プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RegexOptionFlags.None">
      <summary>オプションが何も設定されていないことを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RegexOptionFlags.ECMAScript">
      <summary>式に対して ECMAScript 準拠の動作を有効にします。このフラグは、 IgnoreCase、Multiline、Compiled の各フラグと組み合わせてのみ使用できます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RegexOptionFlags.ExplicitCapture">
      <summary>明示的に名前または番号が指定されたフォームのグループだけが有効なキャプチャであることを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RegexOptionFlags.IgnorePatternWhitespace">
      <summary>エスケープされていないホワイトスペースをパターンから除去し、# 付きのコメントを有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RegexOptionFlags.Multiline">
      <summary>複数行モードです。「^」と「$」の意味を変更して、それらが文字列全体の先頭と末尾だけではなく、 各行の先頭と末尾でもそれぞれ一致するようにします。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RegexOptionFlags.RightToLeft">
      <summary>検索が、左から右ではなく、右から左に行われるように指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RegexOptionFlags.Singleline">
      <summary>単一行モードを指定します。ドット（.）の意味を変更して、すべての文字に一致するようにします（\n 以外のすべての文字ではなく）。</summary>
    </member>
    <member name="T:C1.Win.C1Input.PreValidationEventHandler">
      <summary>PreValidating イベントまたは PreValidated イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む PreValidationEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.PreValidationEventArgs">
      <summary>PreValidating イベントまたは PreValidated イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidationEventArgs.Text">
      <summary>検証するテキストです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidationEventArgs.PreValidation">
      <summary>イベントを発生させた PreValidation オブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidationEventArgs.ErrorInfo">
      <summary>検証が失敗だった場合のエラー情報です。PreValidating 内のイベントコードで設定できます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidationEventArgs.Succeeded">
      <summary>検証結果です（PreValidating 内のイベントコードで割り当てられる）。デフォルト：True です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.PreValidation">
      <summary>ユーザーによって入力された入力文字列を解析前に検証します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeCaseSensitive">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ResetCaseSensitive">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeErrorMessage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ResetErrorMessage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeTrimStart">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ResetTrimStart">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeTrimEnd">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ResetTrimEnd">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeCustomPlaceholders">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.ResetCustomPlaceholders">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.Reset">
      <summary>基本コントロールの PreValidation プロパティ全体をリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.MatchExactList(System.String,C1.Win.C1Input.ErrorInfo)">
      <summary>入力テキストが PatternString で指定された完全一致リスト項目の１つと一致する場合は、True を返します。</summary>
      <param name="text">マッチングする入力文字列です。</param>
      <param name="errorInfo">失敗した場合に設定されるエラー情報です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.MatchWildcardPattern(System.String,System.String)">
      <summary>入力テキストが引数で指定されたワイルドカードパターンと一致する場合は、True を返します。</summary>
      <param name="text">マッチングする入力文字列です。</param>
      <param name="pattern">ワイルドカードパターンです。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.MatchWildcardPatterns(System.String,C1.Win.C1Input.ErrorInfo)">
      <summary>入力テキストが PatternString で指定されたワイルドカードパターンの少なくとも１つと一致する場合は、True を返します。</summary>
      <param name="text">マッチングする入力文字列です。</param>
      <param name="errorInfo">失敗した場合に設定されるエラー情報です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.MatchRegex(System.String,C1.Win.C1Input.ErrorInfo)">
      <summary>入力テキストが PatternString で指定された正規表現パターンと一致する場合は、True を返します。</summary>
      <param name="text">マッチングする入力文字列です。</param>
      <param name="errorInfo">失敗した場合に設定されるエラー情報です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PreValidation.Validate(System.String,C1.Win.C1Input.ErrorInfo)">
      <summary>テキストが PreValidation オブジェクトの現在の設定を使った検証に正しく合格した場合は、True を返します。</summary>
      <param name="text">検証する入力文字列です。</param>
      <param name="errorInfo">失敗した場合に設定されるエラー情報です。</param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.Validation">
      <summary>検証メソッドです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.Inherit">
      <summary>ホストコントロールのプロパティから PreValidation プロパティが継承されるかどうかを管理します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.CaseSensitive">
      <summary>文字列比較で、大文字小文字を区別する場合は True、そうでない場合は False です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.ErrorMessage">
      <summary>標準のメッセージボックスや例外に表示されるエラーメッセージです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.TrimStart">
      <summary>True の場合は、検証前に先頭のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.TrimEnd">
      <summary>True の場合は、検証前に末尾のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.PatternString">
      <summary>検証パターンが入っている文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.ItemSeparator">
      <summary>PatternString 内のリスト項目を区切る文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.CustomPlaceholders">
      <summary>ワイルドカードパターンで使用するユーザー定義文字のコレクション。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PreValidation.RegexOptions">
      <summary>正規表現のマッチングに影響する設定です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NullableDateTimeEventHandler">
      <summary>DateValueChanged イベントと DateValueSelected イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む NullableDateTimeEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.NullableDateTimeEventArgs">
      <summary>DateValueChanged イベントと DateValueSelected イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NullableDateTimeEventArgs.Date">
      <summary>日付の値です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NullableDateTimeEventArgs.DateIsNull">
      <summary>日付の値が null の場合は、True に設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.CreationTime">
      <summary>ドロップダウンフォームを作成するタイミングを決定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CreationTime.Default">
      <summary>ホストコントロールの作成時。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CreationTime.OnFirstCall">
      <summary>ドロップダウンフォームの最初の呼び出し時。</summary>
    </member>
    <member name="T:C1.Win.C1Input.LengthUnit">
      <summary>
        <b>LengthUnit</b>列挙を定義します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Input.LengthUnit.Char">
      <summary>文字列の長さを計算するとき、計算単位が .Net 文字であることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.LengthUnit.Byte">
      <summary>文字列の長さを計算するとき、計算単位がバイトであることを示します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.VisualStyle">
      <summary>コントロールのビジュアルスタイルを決定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VisualStyle.Custom">
      <summary>カスタムスタイル。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VisualStyle.System">
      <summary>標準のシステムスタイル。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VisualStyle.Office2007Blue">
      <summary>MS Office 2007 の青の配色。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VisualStyle.Office2007Black">
      <summary>MS Office 2007 の黒の配色。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VisualStyle.Office2007Silver">
      <summary>MS Office 2007 のシルバーの配色。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VisualStyle.Office2010Blue">
      <summary>MS Office 2010 の青の配色。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VisualStyle.Office2010Black">
      <summary>MS Office 2010 の黒の配色。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VisualStyle.Office2010Silver">
      <summary>MS Office 2010 のシルバーの配色。</summary>
    </member>
    <member name="T:C1.Win.C1Input.FormatTypeEnum">
      <summary>FormatType プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.DefaultFormat">
      <summary>TypeConverter.ConvertToString() を使用して変換を行います。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.UseEvent">
      <summary>Formatting イベント（または Parsing イベント）内のユーザーコードによって変換が行われます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.CustomFormat">
      <summary>書式設定には、CustomFormat プロパティに割り当てられた文字列が使用されます。 解析には、NumberStyle、DateTimeStyle、CustomFormat の各プロパティが使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.GeneralNumber">
      <summary>固定小数点または指数表記を使用して、数値が最も簡単な小数形式に変換されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.Currency">
      <summary>数値が、金額を表す文字列に変換されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.FixedPoint">
      <summary>数値が「-ddd.ddd…」形式の文字列に変換されます。「d」はそれぞれ数字（０～９）を示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.StandardNumber">
      <summary>数値が「-d,ddd,ddd.ddd…」形式の文字列に変換されます。「d」はそれぞれ数字（0～9）を示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.Percent">
      <summary>数値が、NumberFormatInfo.PercentNegativePattern プロパティまたは NumberFormatInfo.PercentPositivePattern プロパティの定義に従って、 パーセンテージを表す文字列に変換されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.Scientific">
      <summary>数値が「-d.ddd…E+ddd」または「-d.ddd…e+ddd」形式の文字列に変換されます。「d」はそれぞれ数字（0～9）を示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.RoundTrip">
      <summary>ラウンドトリップ指定子を指定すると、文字列に変換された数値が再度同じ数値に 解析されることが保証されます。この書式は、浮動小数点型でのみサポートされています。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.Integer">
      <summary>数値が十進法の数値を含む文字列として表示されます。この書式は、整数型でのみサポートされています。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.Hexadecimal">
      <summary>数値が 16 進数字の文字列に変換されます。この書式は、整数型でのみサポートされています。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.YesNo">
      <summary>ブール値に変換され、False の場合は No、True の場合は Yes と表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.TrueFalse">
      <summary>ブール値に変換され、True または False と表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.OnOff">
      <summary>ブール値に変換され、False の場合は Off、True の場合は On と表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.GeneralDate">
      <summary>標準の日付/時刻パターン（短い書式）です。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.LongDate">
      <summary>指定された CultureInfo の長い日付書式に従って、日付が表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.MediumDate">
      <summary>中間の長さの日付書式（dd-MMM-yy）で日付が表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.ShortDate">
      <summary>指定された CultureInfo の短い日付書式で日付が表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.LongTime">
      <summary>ロケールの長い時刻書式（時間、分、秒を含む）で時刻が表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.MediumTime">
      <summary>時間と分から成る 12 時間形式と AM/PM 指定子で、時刻が表示されます（hh:mm tt）。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.ShortTime">
      <summary>24 時間形式で時刻が表示されます（「17:45」など）。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.LongDateShortTime">
      <summary>指定された CultureInfo の書式に従って、日付が長い書式で、また時刻が短い書式で表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.LongDateLongTime">
      <summary>指定された CultureInfo の書式に従って、日付が長い書式で、また時刻が長い書式で表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.ShortDateShortTime">
      <summary>指定された CultureInfo の書式に従って、日付が短い書式で、また時刻が短い書式で表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.ShortDateLongTime">
      <summary>指定された CultureInfo の書式に従って、日付が短い書式で、また時刻が長い書式で表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.MonthAndDay">
      <summary>日付の月と日が表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.DateAndTimeGMT">
      <summary>日付/時刻がグリニッジ標準時（GMT）として書式設定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.DateTimeSortable">
      <summary>日付/時刻がソート可能なインデックスとして書式設定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.GMTSortable">
      <summary>日付/時刻が GMT でソート可能なインデックスとして書式設定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.LongDateTimeGMT">
      <summary>日付/時刻が長い書式で GMT として書式設定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.FormatTypeEnum.YearAndMonth">
      <summary>日付が年と月として書式設定されます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.TypeRestrictionEnum">
      <summary>この列挙は内部使用専用です</summary>
    </member>
    <member name="F:C1.Win.C1Input.TypeRestrictionEnum.AnyType">
      <summary>任意の型のデータ。</summary>
    </member>
    <member name="F:C1.Win.C1Input.TypeRestrictionEnum.Numbers">
      <summary>数値データ型のみ。</summary>
    </member>
    <member name="F:C1.Win.C1Input.TypeRestrictionEnum.DateTime">
      <summary>DateTime データ型のみ。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DropDownFormAlignmentEnum">
      <summary>DropDownForm.DropDownAlign プロパティと C1DropDownControl.DropDownFormAlign プロパティによってのみ使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormAlignmentEnum.Default">
      <summary>C1DropDownControl で、ドロップダウンフォームの配置がドロップダウンフォームの DropDownAlign プロパティによって指定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormAlignmentEnum.Left">
      <summary>左揃え。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormAlignmentEnum.Center">
      <summary>中央揃え。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormAlignmentEnum.Right">
      <summary>右揃え。</summary>
    </member>
    <member name="T:C1.Win.C1Input.VerticalAlignEnum">
      <summary>C1TextBox.VerticalAlign プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VerticalAlignEnum.Top">
      <summary>テキストは、それを囲むコントロールの上に揃えられます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VerticalAlignEnum.Middle">
      <summary>テキストは、それを囲むコントロールの中央に揃えられます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.VerticalAlignEnum.Bottom">
      <summary>テキストは、それを囲むコントロールの下に揃えられます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DaylightTimeAdjustmentEnum">
      <summary>C1Label.DaylightTimeAdjustment プロパティと C1TextBox.DaylightTimeAdjustment プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DaylightTimeAdjustmentEnum.NoAdjustments">
      <summary>夏時間の調整を行いません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DaylightTimeAdjustmentEnum.AdvanceGMTOffsetForTheDaylightSavingTime">
      <summary>GMTOffset プロパティが標準時時差に対応している場合は、このオプションを使用します。 夏時間に対しては、GMTOffset を１時間進める必要があります。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DaylightTimeAdjustmentEnum.SetGMTOffsetBackForTheStandardTime">
      <summary>GMTOffset プロパティが夏時間時差に設定されている場合は、このオプションを使用します。 したがって、標準時に対しては、これを１時間戻す必要があります。</summary>
    </member>
    <member name="T:C1.Win.C1Input.InitialSelectionEnum">
      <summary>C1TextBox.InitialSelection プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.InitialSelectionEnum.SelectAll">
      <summary>テキスト全体が選択されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.InitialSelectionEnum.CaretAtStart">
      <summary>何も選択されません。カレットはテキストの先頭に移動します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.InitialSelectionEnum.CaretAtEnd">
      <summary>何も選択されません。カレットはテキストの末尾に移動します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ValueChangedBehaviorEnum">
      <summary>C1TextBox.ValueChangedBehavior. で利用します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ValueChangedBehaviorEnum.Default">
      <summary>ValueChanged イベントは、Value プロパティが変化したときにだけ発生します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ValueChangedBehaviorEnum.FireOnAnyChange">
      <summary>ValueChanged イベントは、テキストが変化したときに発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.ExitOnLeftRightKey">
      <summary>左矢印キーまたは右矢印キーのアクションを指定します。</summary>
      <remarks>カレットが左端または右端の位置にある場合に、左矢印キーまたは右矢印キーでフォーカスが失なわれます。</remarks>
    </member>
    <member name="F:C1.Win.C1Input.ExitOnLeftRightKey.None">
      <summary>アクションなしを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ExitOnLeftRightKey.Left">
      <summary>コントロールの最初の文字で左矢印キーまたは Ctrl+ 左矢印キーが押されたときに、前のコントロールに移動するように指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ExitOnLeftRightKey.Right">
      <summary>コントロールの最後の文字で右矢印キーまたは Ctrl+ 右矢印キーが押されたとき、次のコントロールに移動するように指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.ExitOnLeftRightKey.Both">
      <summary>コントロールの最初または最後の文字で、左矢印キーまたは右矢印キーまたは Ctrl+ 左矢印キーまたは Ctrl+ 右矢印キーが押されたとき、前のコントロールまたは次のコントロールに移動するように指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.CultureInfoSetupEventHandler">
      <summary>CultureInfoSetup イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントデータを含む CultureInfoSetupEventArgs オブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Input.CultureInfoSetupEventArgs">
      <summary>CultureInfoSetup イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.CultureInfoSetupEventArgs.CultureInfo">
      <summary>地域の設定です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Margins">
      <summary>コントロールの内容の周囲の４つのマージンを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.Margins.#ctor">
      <summary>Margins クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Margins クラスの新しいインスタンスを初期化します。</summary>
      <param name="left"></param>
      <param name="right"></param>
      <param name="top"></param>
      <param name="bottom"></param>
    </member>
    <member name="M:C1.Win.C1Input.Margins.Clone">
      <summary>現在の Margins と同じコピーを作成します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.Margins.Equals(System.Object)">
      <summary>オーバーロードされます。２つの Object インスタンスが等しいかどうかを判定します。</summary>
      <param name="obj"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.Margins.GetHashCode">
      <summary>特定の型に対するハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルなどのデータ構造内で使用できます。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.Margins.ToString">
      <summary>この Margins を人が読み取ることができる文字列に変換します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.Margins.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>オーバーロードされます。マージンの値を設定します。</summary>
      <param name="left"></param>
      <param name="right"></param>
      <param name="top"></param>
      <param name="bottom"></param>
    </member>
    <member name="M:C1.Win.C1Input.Margins.Set(System.Drawing.Printing.Margins)">
      <summary>オーバーロードされます。マージンの値を設定します。</summary>
      <param name="printMargins"></param>
    </member>
    <member name="M:C1.Win.C1Input.Margins.Reset">
      <summary>すべてのマージンを０に設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.Margins.ShouldSerialize">
      <summary>少なくとも１つのマージンがデフォルトの０値ではない場合に、True を返します。そうでない場合は、false を返します。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Input.Margins.Left">
      <summary>左マージンをピクセル単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.Margins.Right">
      <summary>右マージンをピクセル単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.Margins.Top">
      <summary>上マージンをピクセル単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.Margins.Bottom">
      <summary>下マージンをピクセル単位で取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.CustomPlaceholder">
      <summary>編集マスクおよび事前検証のワイルドカードパターンで使用されるユーザー定義のカスタム文字（プレースホルダ）。</summary>
    </member>
    <member name="M:C1.Win.C1Input.CustomPlaceholder.#ctor">
      <summary>CustomPlaceholder クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.CustomPlaceholder.#ctor(System.Char,System.Boolean,System.String,System.Boolean,System.Boolean)">
      <summary>CustomPlaceholder クラスの新しいインスタンスを初期化します。</summary>
      <param name="placeholder">Placeholder プロパティの値。</param>
      <param name="optionalPlace">Optional プロパティの値。</param>
      <param name="lookupChars">LookupChars プロパティの値。</param>
      <param name="caseSensitive">CaseSensitive プロパティの値。</param>
      <param name="excluding">Excluding プロパティの値。</param>
    </member>
    <member name="M:C1.Win.C1Input.CustomPlaceholder.#ctor(System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
      <summary>CustomPlaceholder クラスの新しいインスタンスを初期化します。</summary>
      <param name="placeholder">Placeholder プロパティの値。</param>
      <param name="optionalPlace">Optional プロパティの値。</param>
      <param name="lookupChars">LookupChars プロパティの値。</param>
      <param name="caseSensitive">CaseSensitive プロパティの値。</param>
      <param name="excluding">Excluding プロパティの値。</param>
    </member>
    <member name="M:C1.Win.C1Input.CustomPlaceholder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>CustomPlaceholder クラスの新しいインスタンスを初期化します。</summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="P:C1.Win.C1Input.CustomPlaceholder.Placeholder">
      <summary>ユーザー定義のプレースホルダとして使用される特殊文字です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.CustomPlaceholder.Optional">
      <summary>文字がオプションであり、省略できる場合は True です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.CustomPlaceholder.LookupChars">
      <summary>プレースホルダに一致する文字のリスト（文字列）（Excluding も参照）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.CustomPlaceholder.CaseSensitive">
      <summary>文字列比較で、大文字小文字を区別する場合は True、そうでない場合は False。</summary>
    </member>
    <member name="P:C1.Win.C1Input.CustomPlaceholder.Excluding">
      <summary>LookupChars を許可される文字または許可されない文字のどちらに解釈するかを指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.PlaceholderCollection">
      <summary>CustomPlaceholder オブジェクトのコレクションです。</summary>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.AddRange(C1.Win.C1Input.CustomPlaceholder[])">
      <summary>ICollection の特殊文字を PlaceholderCollection の末尾に追加します。</summary>
      <param name="c">追加する要素を含む ICollection。</param>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.CheckItemBeforeAdding(C1.Win.C1Input.CustomPlaceholder)">
      <summary>プレースホルダの有効性をチェックします。</summary>
      <param name="cph"></param>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.Add(C1.Win.C1Input.CustomPlaceholder)">
      <summary>コレクションに新しい特殊文字を追加します。</summary>
      <param name="cph">追加する CustomPlaceholder。</param>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.Insert(System.Int32,C1.Win.C1Input.CustomPlaceholder)">
      <summary>新しい特殊文字をコレクションの指定された位置に挿入します。</summary>
      <param name="index">CustomPlaceholder が挿入される０から始まるインデックスです。</param>
      <param name="cph">挿入する CustomPlaceholder。</param>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.OnInsert(System.Int32,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="index"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.Contains(System.Char)">
      <summary>プレースホルダコレクション内に文字があるかどうかを指定します。</summary>
      <param name="placeholder">文字引数です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.IndexOf(System.Char)">
      <summary>プレースホルダコレクション内の文字のインデックスを返すか、コレクションに属していない場合は –1 を返します。</summary>
      <param name="placeholder">文字引数です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.Remove(System.Char)">
      <summary>コレクションから特定の文字を削除します。</summary>
      <param name="placeholder">コレクションから削除する文字です。</param>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.CopyTo(C1.Win.C1Input.CustomPlaceholder[],System.Int32)">
      <summary>コレクションの要素を特定の配列インデックス位置から順に配列にコピーします。</summary>
      <param name="array">コレクションからコピーされる要素のコピー先の配列です。</param>
      <param name="index">コピーを開始する位置の０から始まる配列のインデックス。</param>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.GetItem(System.Char)">
      <summary>文字引数に対応する CustomPlaceholder オブジェクトを返すか、コレクションに属していない場合は null を返します。</summary>
      <param name="placeholder">文字引数です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.PlaceholderCollection.OnChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="E:C1.Win.C1Input.PlaceholderCollection.Changed">
      <summary>PlaceholderCollection が変更されるときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.PlaceholderCollection.Item(System.Int32)">
      <summary>指定されたインデックス位置の特殊文字を取得または設定します。</summary>
      <param name="index">取得または設定する要素の０から始まるインデックス。</param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Input.C1Label">
      <summary>書式設定されたデータを表示する読み取り専用データ連結コントロールです。C1Label は、C1TextBox コントロールのすべての書式設定機能をサポートします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.#ctor">
      <summary>C1Label クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.Dispose(System.Boolean)">
      <summary>C1Label によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnBorderColorChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1Label.BorderColorChanged" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
      <remarks>
        <para>イベントが発生すると、デリゲートからイベントハンドラが呼び出されます。</para>
        <para>
          派生クラスでは、
          <b>OnBorderColorChanged</b>メソッドを使用して、デリゲートをアタッチせずにイベントを処理することもできます。 これは、派生クラスでイベントを処理する場合にお勧めのテクニックです。
        </para>
        <para>
          <b>継承時のメモ：</b>派生クラスで
          <b>OnBorderColorChanged</b>をオーバーライドする場合は、 登録済みのデリゲートがイベントを受け取るように、必ず基本クラスの
          <b>OnBorderColorChanged</b>メソッドを呼び出してください。
        </para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnFormatError(C1.Win.C1Input.FormatErrorEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1Label.FormatError" />イベントを呼び出します。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Win.C1Input.FormatErrorEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnCultureInfoSetup(C1.Win.C1Input.CultureInfoSetupEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1Label.CultureInfoSetup" />イベントを呼び出します。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Win.C1Input.CultureInfoSetupEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnFormatting(C1.Win.C1Input.FormatEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1Label.Formatting" />イベントを呼び出します。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Win.C1Input.FormatEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnFormatted(C1.Win.C1Input.FormatEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1Label.Formatted" />イベントを呼び出します。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Win.C1Input.FormatEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnDataTypeChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1Label.DataTypeChanged" />イベントを呼び出します。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnValueChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1Label.ValueChanged" />イベントを呼び出します。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.OnBindingFormatting(System.Windows.Forms.ConvertEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1Label.BindingFormatting" />イベントを呼び出します。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.Forms.ConvertEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Label.GetPreferredSize(System.Drawing.Size)">
      <summary>コントロールを配置できる四角形領域のサイズを取得します。</summary>
      <param name="proposedSize">コントロールのカスタムサイズ領域。</param>
      <returns>
        四角形の幅と高さを表す
        <see cref="T:System.Drawing.Size" />型の順序付きペア。
      </returns>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.VisualStyle">
      <summary>コントロールのビジュアルスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.BorderColor">
      <summary>コントロールの境界線色を取得または設定します。</summary>
      <remarks>
        <para>
          コントロールの境界線色を指定するには、
          <b>BorderColor</b>プロパティを使用します。 このプロパティは、
          <see cref="T:System.Drawing.Color" />オブジェクトを使用して設定されます。
        </para>
        <para>
          <b>BorderColor</b>プロパティは、
          <see cref="P:C1.Win.C1Input.C1TextBox.BorderStyle" />プロパティが
          <b>FixedSingle</b>に設定されている場合にのみ有効です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.UseFieldStyle">
      <summary>このコントロールの C1ViewColumn オブジェクトで定義されている ColumnStyle プロパティを優先的に使用するかどうかを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.Culture">
      <summary>カルチャ ID です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.CultureName">
      <summary>プロパティグリッド内の Culture プロパティに対して選択された名前です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.UserCultureOverride">
      <summary>True の場合、選択されたカルチャよりユーザーの現在の地域設定が優先的に使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.CultureInfo">
      <summary>現在の CultureInfo オブジェクトです（実行時に利用可能）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.FormatInfo">
      <summary>値の表示に使用される書式です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.MaskInfo">
      <summary>編集マスクの設定です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.CaseSensitive">
      <summary>文字列比較で、大文字小文字を区別する場合は True、そうでない場合は False です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.FormatType">
      <summary>標準 .NET 書式指定子、カスタム書式設定、プログラム書式設定など、書式設定方法を指定する列挙値。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.CustomFormat">
      <summary>FormatType = FormatTypeEnum.CustomFormat の場合に使用されるカスタム書式指定子です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.NullText">
      <summary>DbNull 値を表す文字列です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.EmptyAsNull">
      <summary>True の場合、空の文字列は null 値（DbNull）として解釈されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.TrimStart">
      <summary>True の場合は、先頭のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.TrimEnd">
      <summary>True の場合は、末尾のスペースが削除されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.CurrentTimeZone">
      <summary>True の場合、コントロールの格納されている Value は現在のタイムゾーンにあります。そうでない場合、Value は GMTOffset プロパティによって定義されるタイムゾーンに調整されます。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.GMTOffset">
      <summary>CurrentTimeZone = False の場合に使用される Value プロパティのタイムゾーンです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.DaylightTimeAdjustment">
      <summary>GMTOffset プロパティで指定された値は、夏時間による変更に応じて進めたり、遅らせることができます（CurrentTimeZone = False の場合にのみ使用）。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.Tag">
      <summary>コントロールに関するデータを含むオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.ErrorProvider">
      <summary>コントロールのエラー状態を示すために使用される ErrorProvider オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.Text">
      <summary>コントロール内の現在のテキストです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.TextDetached">
      <summary>Value プロパティと Text プロパティを個別に設定できるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.DataSource">
      <summary>コントロールのバインド先のデータソースオブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.DataField">
      <summary>コントロールのバインド先のデータソースオブジェクトのフィールドです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.DataType">
      <summary>Value プロパティの型です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.ValueIsDbNull">
      <summary>Value が DbNull かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.Value">
      <summary>C1Input コントロールの主要な連結可能プロパティです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.Padding">
      <summary>コントロール内のパディングを取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.BorderColorChanged">
      <summary>BorderColor プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.VisualStyleChanged">
      <summary>VisualStyle プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.CultureInfoSetup">
      <summary>CultureInfo を（起動時に）セットアップできるか、既に変更されています。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.FormatError">
      <summary>格納値の書式設定中にエラーがありました。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.Formatting">
      <summary>プログラムによって値を書式設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.Formatted">
      <summary>値が書式設定された後に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.DataTypeChanged">
      <summary>DataType プロパティが変更されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.ValueChanged">
      <summary>値が変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Label.BindingFormatting">
      <summary>データソースから Value が取得されると発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Label.DefaultThemeRootPath">
      <summary>xml テーマファイルのコントロールのデフォルトのパス。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1Button">
      <summary>追加のビジュアルスタイルをサポートする Windows ボタンコントロールを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1Button.#ctor">
      <summary>C1Button クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1Button.Dispose(System.Boolean)">
      <summary>C1TextBox によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1Button.GetPreferredSize(System.Drawing.Size)">
      <summary>コントロールを配置できる四角形領域のサイズを取得します。</summary>
      <param name="proposedSize">コントロールのカスタムサイズ領域。</param>
      <returns>
        四角形の幅と高さを表す
        <see cref="T:System.Drawing.Size" />型の順序付きペア。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.C1Button.ResetVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.C1Button.VisualStyle" />をデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.C1Button.ShouldSerializeVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.C1Button.VisualStyle" />がシリアライズされるかどうかをテストします。
      </summary>
      <returns>
        <see cref="P:C1.Win.C1Input.C1Button.VisualStyle" />がシリアライズされる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.C1Button.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1Button.ResetVisualStyleBaseStyle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1Button.ShouldSerializeVisualStyleBaseStyle">
      <summary>これは内部使用専用です。</summary>
      <returns>VisualStyleBaseStyle がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Input.C1Button.DefaultThemeRootPath">
      <summary>デフォルトのテーマルートパス。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1Button.VisualStyle">
      <summary>コントロールのビジュアルスタイルを取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1Button.VisualStyleChanged">
      <summary>VisualStyle プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.NumericEditCalculator">
      <summary>C1NumericEdit コントロールでドロップダウンとして使用される電卓です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.#ctor">
      <summary>NumericEditCalculator クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.Dispose(System.Boolean)">
      <summary>NumericEditCalculator によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.ResetVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.NumericEditCalculator.VisualStyle" />をデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.ShouldSerializeVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.NumericEditCalculator.VisualStyle" />がシリアライズされるかどうかをテストします。
      </summary>
      <returns>
        <see cref="P:C1.Win.C1Input.NumericEditCalculator.VisualStyle" />がシリアライズされる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.ShouldSerializeUIStrings">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.ResetUIStrings">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.OnResize(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.OnForeColorChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.NumericEditCalculator.ThemeChanged(System.Object,C1.Win.C1Input.VisualStyle)">
      <summary>このメソッドは、テーマが変更されるとき呼び出されます。</summary>
      <param name="theme">新しいテーマ。</param>
      <param name="visualStyle">基本ビジュアルスタイル。</param>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.VisualStyle">
      <summary>コントロールのビジュアルスタイルを取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.NumericEditCalculator.VisualStyleChanged">
      <summary>VisualStyle プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.ButtonFlatStyle">
      <summary>ドロップダウン電卓ボタンのスタイルを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.DisplayFormat">
      <summary>// パッチ：ローカライズ：StringTables.cs の作成後に追加</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.StoredFormat">
      <summary>ドロップダウン電卓の格納値の書式設定に使用されるカスタム書式指定子です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.FormatOnClose">
      <summary>ドロップダウン電卓に入力された値に StoredFormat を適用するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.RightToLeft">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.UIStrings">
      <summary>ユーザーインタフェース文字列のコレクション。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.ContextMenu">
      <summary>コントロールに関連付けられたショートカットメニューを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.UseStaticMemory">
      <summary>ドロップダウン電卓に対して、［スタティックメモリ］コンテキストメニューを表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.DefaultSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.NumericEditCalculator.ShowFocusCues">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1NumericEdit">
      <summary>数値を表示および編集します。数値を簡単に入力できるドロップダウン電卓の機能が付いています。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.#ctor">
      <summary>C1NumericEdit クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.ShouldSerializeIncrement">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.ResetIncrement">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.ShouldSerializeCalculator">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.SpinUp">
      <summary>スピンアップを実行します。</summary>
      <remarks>
        <see cref="P:C1.Win.C1Input.C1NumericEdit.Increment" />プロパティは、インクリメントの定義に使用されます。 このメソッドは、上矢印キーが押されたときと同じ動作をします。
      </remarks>
      <seealso cref="M:C1.Win.C1Input.C1NumericEdit.SpinDown" />
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.SpinUp(System.Object)">
      <summary>スピンアップを実行します。</summary>
      <param name="increment">
        スピンアップ時にインクリメントを示す
        <see cref="T:System.Object" />値。
      </param>
      <remarks>このメソッドは、上矢印キーが押されたときと同じ動作をします。</remarks>
      <seealso cref="M:C1.Win.C1Input.C1NumericEdit.SpinDown(System.Object)" />
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.SpinDown">
      <summary>スピンダウンを実行します。</summary>
      <remarks>
        <see cref="P:C1.Win.C1Input.C1NumericEdit.Increment" />プロパティは、デクリメントの定義に使用されます。 このメソッドは、下矢印キーが押されたときと同じ動作をします。
      </remarks>
      <seealso cref="M:C1.Win.C1Input.C1NumericEdit.SpinUp" />
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.SpinDown(System.Object)">
      <summary>スピンダウンを実行します。</summary>
      <param name="decrement">
        スピンダウン時にデクリメントを示す
        <see cref="T:System.Object" />値。
      </param>
      <remarks>このメソッドは、下矢印キーが押されたときと同じ動作をします。</remarks>
      <seealso cref="M:C1.Win.C1Input.C1NumericEdit.SpinDown(System.Object)" />
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.OnUpDownButtonClick(C1.Win.C1Input.UpDownButtonClickEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.OpenDropDown">
      <summary>ドロップダウンを表示します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1NumericEdit.UpdateDataType(System.Type)">
      <summary>これは内部使用専用です。</summary>
      <param name="propertyType"></param>
    </member>
    <member name="P:C1.Win.C1Input.C1NumericEdit.DefaultDropDownFormClassName">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1NumericEdit.TypeRestriction">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1NumericEdit.DataType">
      <summary>Value プロパティの型です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1NumericEdit.FormatType">
      <summary>標準 .NET 書式指定子、カスタム書式設定、プログラム書式設定など、書式設定方法を指定する列挙値。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1NumericEdit.Increment">
      <summary>ユーザーがアップ/ダウンボタンをクリックしたときに増減する量を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1NumericEdit.Calculator">
      <summary>ドロップダウン電卓オブジェクト。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1NumericEdit.Text">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1NumericEdit.DefaultThemeRootPath">
      <summary>xml テーマファイルのコントロールのデフォルトのパス。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DropDownCalculator">
      <summary>ドロップダウン電卓フォームのクラスを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.#ctor">
      <summary>DropDownCalculator クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.Dispose(System.Boolean)">
      <summary>DropDownCalculator によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.OnPostChanges(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.OnCancelChanges(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.OnHandleCreated(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.OnVisibleChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.OnOpen(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownCalculator.WndProc(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
    </member>
    <member name="P:C1.Win.C1Input.DropDownCalculator.Calculator">
      <summary>DropDownCalculator フォームで使用される電卓。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1PictureBox">
      <summary>標準の PictureBox 機能のほかに、C1PictureBox は、画像データが入ったデータソースフィールドへのデータ連結をサポートします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.#ctor">
      <summary>C1PictureBox クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.Dispose(System.Boolean)">
      <summary>C1PictureBox によって使用されたリソースを解放します。</summary>
      <param name="disposing">マネージリソースとアンマネージリソースの両方を解放する場合は、true。アンマネージリソースだけを解放する場合は、false。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.ImageToByteArray(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
      <summary>画像の内容を返します。</summary>
      <param name="image">バイト配列として返す画像です。</param>
      <param name="format">画像の内容を返すときの形式です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.ImageFromByteArray(System.Byte[])">
      <summary>バイト配列を画像に変換します。</summary>
      <param name="buffer">画像の内容です。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.CopyImage">
      <summary>現在、コントロール内にある画像をクリップボードにコピーします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.PasteImage">
      <summary>クリップボードに画像が入っている場合、このメソッドは、コントロールの Image プロパティの内容を置き換えます</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.OnBindingFormatting(System.Windows.Forms.ConvertEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.OnBindingParsing(System.Windows.Forms.ConvertEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.OnImageChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.OnGotFocus(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.OnLostFocus(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1PictureBox.WndProc(System.Windows.Forms.Message@)">
      <summary>これは内部使用専用です。</summary>
      <param name="m"></param>
    </member>
    <member name="P:C1.Win.C1Input.C1PictureBox.DataSource">
      <summary>コントロールのバインド先のデータソースオブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1PictureBox.DataField">
      <summary>コントロールのバインド先のデータソースオブジェクトのフィールドです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1PictureBox.ImmediateUpdate">
      <summary>Image プロパティが変化した直後に画像をデータソースに挿入するか、CurrencyManager.EndCurrentEdit() メソッドが次に呼ばれるまでは挿入しないかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1PictureBox.Image">
      <summary>コントロールに表示される画像。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1PictureBox.FocusOnClick">
      <summary>このピクチャボックスがクリックされたときにフォーカスを受け取るかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1PictureBox.BindingFormatting">
      <summary>データソースから Image が取得されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1PictureBox.BindingParsing">
      <summary>データソースに Image が格納される時に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1PictureBox.ImageChanged">
      <summary>画像が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1RangeSlider">
      <summary>追加のビジュアルスタイルをサポートする Windows 範囲スライダコントロールを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.#ctor">
      <summary>C1RangeSlider クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.Dispose(System.Boolean)">
      <summary>C1RangeSlider によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.ResetStyles">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.ShouldSerializeStyles">
      <summary>これは内部使用専用です。</summary>
      <returns>スタイルがシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.ResetVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.C1RangeSlider.VisualStyle" />をデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.ShouldSerializeVisualStyle">
      <summary>
        <see cref="P:C1.Win.C1Input.C1RangeSlider.VisualStyle" />がシリアライズされるかどうかをテストします。
      </summary>
      <returns>
        <see cref="P:C1.Win.C1Input.C1RangeSlider.VisualStyle" />がシリアライズされる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.ResetVisualStyleBaseStyle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.ShouldSerializeVisualStyleBaseStyle">
      <summary>これは内部使用専用です。</summary>
      <returns>VisualStyleBaseStyle がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnValueChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnOrientationChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnDirectionChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnMouseLeave(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.LowerValue">
      <summary>範囲コントロールの現在の小さい方の値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.UpperValue">
      <summary>範囲コントロールの現在の大きい方の値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.Minimum">
      <summary>範囲コントロールの設定可能な最小値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.Maximum">
      <summary>範囲コントロールの設定可能な最大値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.IsRangeBarVisible">
      <summary>C1RangeSlider バーを表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.Orientation">
      <summary>C1RangeSlider が水平方向と垂直方向のどちらであるかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.IsDirectionReversed">
      <summary>値を増やす方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.LowerThumbPath">
      <summary>小さい方の値のカスタムサムのパスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.UpperThumbPath">
      <summary>大きい方の値のカスタムサムのパスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.Enabled">
      <summary>コントロールがユーザーの操作に応答できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.Styles">
      <summary>名前付き Style オブジェクトのコレクションを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.VisualStyle">
      <summary>コントロールのビジュアルスタイルを取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1RangeSlider.VisualStyleChanged">
      <summary>VisualStyle プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1RangeSlider.LowerValueChanged">
      <summary>
        <see cref="P:C1.Win.C1Input.C1RangeSlider.LowerValue" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Input.C1RangeSlider.UpperValueChanged">
      <summary>
        <see cref="P:C1.Win.C1Input.C1RangeSlider.UpperValue" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Input.C1RangeSlider.ValueChanged">
      <summary>LowerValue プロパティまたは UpperValue プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1RangeSlider.OrientationChanged">
      <summary>
        <see cref="P:C1.Win.C1Input.C1RangeSlider.Orientation" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Input.C1RangeSlider.DirectionChanged">
      <summary>
        <see cref="P:C1.Win.C1Input.C1RangeSlider.IsDirectionReversed" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.DefaultThemeRootPath">
      <summary>デフォルトのテーマルートパス。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection">
      <summary>名前付き Style オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ResetBarStyle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ShouldSerializeBarStyle">
      <summary>これは内部使用専用です。</summary>
      <returns>BarStyle がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ResetThumbStyle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ShouldSerializeThumbStyle">
      <summary>これは内部使用専用です。</summary>
      <returns>ThumbStyle がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyle">
      <summary>バーの名前付き Style オブジェクトのコレクションを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyle">
      <summary>サムの名前付き Style オブジェクトのコレクションを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection">
      <summary>バーの名前付き Style オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.ResetBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.ShouldSerializeBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns>BackSolor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.ResetBorderColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.ShouldSerializeBorderColor">
      <summary>これは内部使用専用です。</summary>
      <returns>BorderColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.ResetDisabledBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.ShouldSerializeDisabledBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns>DisabledBackColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.ResetDisabledBorderColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.ShouldSerializeDisabledBorderColor">
      <summary>これは内部使用専用です。</summary>
      <returns>DisabledBorderColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.BackColor">
      <summary>バーの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.BorderColor">
      <summary>バーの境界線色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.DisabledBackColor">
      <summary>コントロールが無効の状態におけるバーの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.DisabledBorderColor">
      <summary>コントロールが無効の状態におけるバーの境界線色を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection">
      <summary>サムの名前付き Style オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializeBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns>BackColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetBorderColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializeBorderColor">
      <summary>これは内部使用専用です。</summary>
      <returns>BorderColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetHotBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializeHotBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns>HotBackColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetHotBorderColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializeHotBorderColor">
      <summary>これは内部使用専用です。</summary>
      <returns>HotBorderColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetPressedBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializePressedBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns>PressedBackColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetPressedBorderColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializePressedBorderColor">
      <summary>これは内部使用専用です。</summary>
      <returns>PressedBorderColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetDisabledBackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializeDisabledBackColor">
      <summary>これは内部使用専用です。</summary>
      <returns>DisabledBackColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetDisabledBorderColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializeDisabledBorderColor">
      <summary>これは内部使用専用です。</summary>
      <returns>DisabledBorderColor がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ResetCornerRadius">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.ShouldSerializeCornerRadius">
      <summary>これは内部使用専用です。</summary>
      <returns>CornerRadius がシリアライズされる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.BackColor">
      <summary>サムの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.BorderColor">
      <summary>サムの境界線色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.HotBackColor">
      <summary>サムにマウスが置かれたときの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.HotBorderColor">
      <summary>サムにマウスが置かれたときの境界線色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.PressedBackColor">
      <summary>ユーザーがサム上でマウスをクリックしたときの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.PressedBorderColor">
      <summary>ユーザーがサム上でマウスをクリックしたときの境界線色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.DisabledBackColor">
      <summary>コントロールが無効の状態におけるサムの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.DisabledBorderColor">
      <summary>コントロールが無効の状態におけるサムの境界線色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.CornerRadius">
      <summary>サムの角の丸みを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1CheckBox">
      <summary>標準の CheckBox 機能に加えて、 C1CheckBox は、ブール型、文字列型、整数型のデータソースフィールドへのデータ連結をサポートします。 C1CheckBox には、BorderStyle プロパティと BorderColor プロパティがあります。 C1CheckBox は、ビジュアルスタイルをサポートします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1CheckBox.#ctor">
      <summary>C1CheckBox クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1CheckBox.Dispose(System.Boolean)">
      <summary>C1CheckBox によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1CheckBox.OnVisualStyleChanged(System.EventArgs)">
      <summary>VisualStyleChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1CheckBox.GetPreferredSize(System.Drawing.Size)">
      <summary>コントロールを配置できる四角形領域のサイズを取得します。</summary>
      <param name="proposedSize">コントロールのカスタムサイズ領域。</param>
      <returns>
        四角形の幅と高さを表す
        <see cref="T:System.Drawing.Size" />型の順序付きペア。
      </returns>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.DataSource">
      <summary>コントロールのバインド先のデータソースオブジェクトです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.DataField">
      <summary>コントロールのバインド先のデータソースオブジェクトのフィールドです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.DataType">
      <summary>Value プロパティの型です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.DisableOnNoData">
      <summary>テキストボックスが空のデータソース（CurrencyManager.Count = 0）に連結されたとき、テキストボックスを無効にする必要があるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.Value">
      <summary>C1Input コントロールの主要な連結可能プロパティです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.TranslateValues">
      <summary>文字列値とチェックボックスの状態を相互に変換します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.VisualStyle">
      <summary>コントロールのビジュアルスタイルを取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1CheckBox.VisualStyleChanged">
      <summary>VisualStyle プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.BorderStyle">
      <summary>C1CheckBox コントロールの境界線スタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.BorderColor">
      <summary>コントロールの境界線色を取得または設定します。</summary>
      <remarks>
        <para>
          コントロールの境界線色を指定するには、
          <b>BorderColor</b>プロパティを使用します。 このプロパティは、
          <see cref="T:System.Drawing.Color" />オブジェクトを使用して設定されます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.DefaultCheckboxRootPath">
      <summary>テーマ xml ファイルのデフォルトの C1CheckBox のパス。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1CheckBox.DefaultButtonThemeRootPath">
      <summary>テーマ xml ファイルのデフォルトの C1Button のパス。</summary>
    </member>
    <member name="T:C1.Win.C1Input.TranslateValues">
      <summary>文字列値とチェックボックスの状態を相互に変換します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.TranslateValues.Checked">
      <summary>
        <b>Checked</b>状態の値。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.TranslateValues.Unchecked">
      <summary>
        <b>Unchecked</b>状態の値。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.TranslateValues.Indeterminate">
      <summary>
        <b>Indeterminate</b>状態の値。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.TranslateValues.IndeterminateIsDbNull">
      <summary>DbNull がチェックボックスの不確定状態に使用されているかどうかを判定します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Localization.Strings">
      <summary>
        <see cref="T:C1.Win.C1Input.Localization.Strings" />クラスには、ローカライズに使用される静的プロパティが含まれます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.Localization.Strings.ResourceManager">
      <summary>
        ルックアップリソースとして使用される
        <see cref="P:C1.Win.C1Input.Localization.Strings.ResourceManager" />オブジェクト。
      </summary>
      <remarks>カスタムコントロールアセンブリ内でリソースを定義する場合は、 このプロパティを有効な値に設定します。</remarks>
    </member>
    <member name="P:C1.Win.C1Input.Localization.Strings.UICulture">
      <summary>
        フォールバックカルチャとして使用されるデフォルトの
        <see cref="T:System.Globalization.CultureInfo" />オブジェクトを返します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Input.C1SplitButton">
      <summary>追加のビジュアルスタイルとドロップダウン項目リストをサポートする複合ボタンコントロールを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1SplitButton.#ctor">
      <summary>C1SplitButton クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1SplitButton.Dispose(System.Boolean)">
      <summary>C1SplitButton によって使用されたリソースを解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1SplitButton.OnDropDownItemClicked(C1.Win.C1Input.DropDownItemClickedEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.C1SplitButton.DropDownItemClicked" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Win.C1Input.DropDownItemClickedEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.C1SplitButton.OnDropDownClosed(C1.Win.C1Input.DropDownClosedEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1SplitButton.OnDropDownOpened(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1SplitButton.GetPreferredSize(System.Drawing.Size)">
      <summary>コントロールを配置できる四角形領域のサイズを取得します。</summary>
      <param name="proposedSize">コントロールのカスタムサイズ領域。</param>
      <returns>
        四角形の幅と高さを表す
        <see cref="T:System.Drawing.Size" />型の順序付きペア。
      </returns>
    </member>
    <member name="P:C1.Win.C1Input.C1SplitButton.Items">
      <summary>
        このボタンにある
        <see cref="T:C1.Win.C1Input.DropDownItem" />コンポーネントのコレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.C1SplitButton.DropDownImageList">
      <summary>ドロップダウン項目に表示する画像を取得するための ImageList。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1SplitButton.DefaultItem">
      <summary>デフォルトのドロップダウン項目を取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1SplitButton.DropDownItemClicked">
      <summary>
        <see cref="T:C1.Win.C1Input.DropDownItem" />がクリックされると発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Input.C1SplitButton.DropDownClosed">
      <summary>ドロップダウンが閉じられると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1SplitButton.DropDownOpened">
      <summary>ドロップダウンが開かれた後に発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1SplitButton.DroppedDown">
      <summary>ドロップダウンが現在開いているかどうかを示す、実行時の読み取り専用プロパティです。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1SplitButton.DefaultThemeRootPath">
      <summary>xml テーマファイルのコントロールのデフォルトのパス。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DropDownItemCollection">
      <summary>ドロップダウン項目のコレクションを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.Add(C1.Win.C1Input.DropDownItem)">
      <summary>コレクションの最後に指定された項目を追加します。</summary>
      <param name="value">
        コレクションの末尾に追加される
        <see cref="T:C1.Win.C1Input.DropDownItem" />。
      </param>
      <returns>
        コレクションに追加される
        <see cref="T:C1.Win.C1Input.DropDownItem" />の０から始まるインデックス値。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.IndexOf(C1.Win.C1Input.DropDownItem)">
      <summary>リスト内で最初に見つかった値の０から始まるインデックスを返します。</summary>
      <param name="value">リストで見つける項目。</param>
      <returns>見つかった場合は、リスト全体で最初に見つかった値の０から始まるインデックス。そうでない場合は -1。</returns>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.Insert(System.Int32,C1.Win.C1Input.DropDownItem)">
      <summary>指定された項目をコレクション内の指定された場所に挿入します。</summary>
      <param name="index">項目を挿入するコレクション内のインデックス位置。</param>
      <param name="value">挿入する項目。</param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.Remove(C1.Win.C1Input.DropDownItem)">
      <summary>指定された項目をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する項目。</param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.Contains(C1.Win.C1Input.DropDownItem)">
      <summary>
        コレクションに特定の
        <see cref="T:C1.Win.C1Input.DropDownItem" />が含まれるかどうかを示します。
      </summary>
      <param name="value">
        検索する
        <see cref="T:C1.Win.C1Input.DropDownItem" />オブジェクト。
      </param>
      <returns>
        コレクションに特定の
        <see cref="T:C1.Win.C1Input.DropDownItem" />オブジェクトが含まれるかどうか。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
        <see cref="!:InputComponent" />を
        <see cref="!:InputComponentCollection" />インスタンスに挿入した後に、 追加のカスタム処理を実行します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
        <see cref="!:InputComponent" />を
        <see cref="!:InputComponentCollection" />インスタンスから削除した後に、 追加のカスタム処理を実行します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
        <see cref="!:InputComponent" />を
        <see cref="!:InputComponentCollection" />インスタンスで設定した後に、 追加のカスタム処理を実行します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.OnClear">
      <summary>
        <see cref="!:InputComponentCollection" />インスタンスのコンテンツをクリアするときに 追加のカスタム処理を実行します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemCollection.OnClearComplete">
      <summary>
        <see cref="!:InputComponentCollection" />インスタンスのコンテンツをクリアした後に 追加のカスタム処理を実行します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItemCollection.Item(System.Int32)">
      <summary>コレクション内の指定されたインデックス位置にある項目を取得または設定します。</summary>
      <param name="index">コレクション内の項目のインデックス位置。</param>
      <returns>
        指定されたインデックス位置にある項目を表す
        <see cref="T:C1.Win.C1Input.DropDownItem" />。
      </returns>
    </member>
    <member name="T:C1.Win.C1Input.DropDownItem">
      <summary>
        <see cref="T:C1.Win.C1Input.C1SplitButton" />コントロールのドロップダウン項目を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.#ctor">
      <summary>DropDownItem クラスのインスタンスを作成します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnDropDown(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.DropDown" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnDropDownClosed(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.DropDownClosed" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnClick(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.Click" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.KeyDown" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.Forms.KeyEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.KeyPress" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.Forms.KeyPressEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.KeyUp" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.Forms.KeyEventArgs" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnGotFocus(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.GotFocus" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnLostFocus(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.LostFocus" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItem.OnDoubleClick(System.EventArgs)">
      <summary>
        <see cref="E:C1.Win.C1Input.DropDownItem.DoubleClick" />イベントを発生させます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.SplitButton">
      <summary>
        この
        <see cref="T:C1.Win.C1Input.DropDownItem" />が属している
        <see cref="T:C1.Win.C1Input.C1SplitButton" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.Items">
      <summary>この DropDownItem に関連付けられる子項目のコレクションを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.CheckOnClick">
      <summary>項目がクリックされたときに押下状態を切り替えるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.Text">
      <summary>コンポーネントに関連付けられたテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.Checked">
      <summary>項目がオンにされているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.DialogResult">
      <summary>モーダルフォームでボタンのクリックによって生成されたダイアログボックスの結果を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.Image">
      <summary>
        <see cref="!:InputButton" />に関連付けられた画像を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.ImageIndex">
      <summary>ImageList 内の画像のインデックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.ImageKey">
      <summary>ImageList 内の画像キーを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.ImageSize">
      <summary>ボタンに表示される画像のサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.ImageAlign">
      <summary>
        <see cref="P:C1.Win.C1Input.DropDownItem.ImageSize" />プロパティで指定された範囲内の画像の配置を取得または設定します。
      </summary>
      <remarks>
        このプロパティの値は、
        <see cref="P:C1.Win.C1Input.DropDownItem.ImageScaling" />= Clip であり、
        <see cref="P:C1.Win.C1Input.DropDownItem.ImageSize" />が画像の元の サイズを超えている場合にのみ使用されます。
      </remarks>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.ImageScaling">
      <summary>
        <see cref="P:C1.Win.C1Input.DropDownItem.ImageSize" />プロパティで指定された範囲内に収まるように画像を拡大縮小する方法を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.Enabled">
      <summary>項目がユーザーの操作に応答できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.Visible">
      <summary>項目が表示されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.Tag">
      <summary>項目に関するデータを含むオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItem.IsDisposed">
      <summary>コンポーネントが廃棄されたかどうかを示す値を取得します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.DropDown">
      <summary>この要素のドロップダウン部分が表示されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.DropDownClosed">
      <summary>この要素のドロップダウン部分が閉じられたことを示します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.Click">
      <summary>コンポーネントがクリックされたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.KeyDown">
      <summary>このコンポーネントにフォーカスがあるときにキーが押されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.KeyPress">
      <summary>このコンポーネントにフォーカスがあるときにキーが押されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.KeyUp">
      <summary>このコンポーネントにフォーカスがあるときにキーが放されると発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.GotFocus">
      <summary>コンポーネントがフォーカスを受け取るときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.LostFocus">
      <summary>コンポーネントがフォーカスを失うときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Input.DropDownItem.DoubleClick">
      <summary>コンポーネントがダブルクリックされたときに発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.BreakType">
      <summary>このコンポーネントの後でレイアウトのフローを分割するかどうかを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.BreakType.None">
      <summary>このコンポーネントの後でレイアウトのフローを分割しません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.BreakType.Row">
      <summary>次のコンポーネントをフロー内の新しい行に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.BreakType.Column">
      <summary>このコンポーネントの後に新しい列を作成します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.BreakType.Group">
      <summary>現在のグループの左端に、現在のコンポーネントの下から始まる新しい行を作成します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.ContentAlignment">
      <summary>
        <see cref="!:InputComponent" />内のコンテンツの配置に対応する値を定義します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.ContentAlignment.NotSet">
      <summary>デフォルト値。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.ContentAlignment.Near">
      <summary>近く。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.ContentAlignment.Far">
      <summary>遠く。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.ContentAlignment.Center">
      <summary>中央。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.ContentAlignment.Spread">
      <summary>拡散。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.InputComboBoxStyle">
      <summary>
        ユーザーが
        <see cref="!:InputComboBox" />のテキスト部分の値を編集できるかどうかを決定します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputComboBoxStyle.DropDown">
      <summary>テキスト部分を編集できます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputComboBoxStyle.DropDownList">
      <summary>テキスト部分を直接編集できません。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.InputContentAlignment">
      <summary>
        <see cref="!:InputComponent" />内のコンテンツの配置に対応する値を定義します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.NotSet">
      <summary>デフォルト値。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.Near">
      <summary>近く。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.Far">
      <summary>遠く。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.Center">
      <summary>中央。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.Spread">
      <summary>拡散。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.InputImageAlignment">
      <summary>入力コンポーネント上の画像の配置を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.TopLeft">
      <summary>画像は、垂直方向には上揃えで、 水平方向には左揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.TopCenter">
      <summary>画像は、垂直方向には上揃えで、 水平方向には中央揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.TopRight">
      <summary>画像は、垂直方向には上揃えで、 水平方向には右揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.MiddleLeft">
      <summary>画像は、垂直方法には中央揃えで、 水平方向には左揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.MiddleCenter">
      <summary>画像は、垂直方法には中央揃えで、 水平方向には中央揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.MiddleRight">
      <summary>画像は、垂直方法には中央揃えで、 水平方向には右揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.BottomLeft">
      <summary>画像は、垂直方向には下揃えで、 水平方向には左揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.BottomCenter">
      <summary>画像は、垂直方向には下揃えで、 水平方向には中央揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.BottomRight">
      <summary>画像は、垂直方向には下揃えで、 水平方向には右揃えで配置されます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.InputImageLayout">
      <summary>多機能ツールチップで背景画像の表示に使用されるレイアウトロジックを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageLayout.None">
      <summary>画像は、コントロールのクライアント四角形の左上に配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageLayout.Tile">
      <summary>画像は、コントロールのクライアント四角形全体に並べて表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageLayout.Center">
      <summary>画像は、コントロールのクライアント四角形の中央に配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageLayout.Stretch">
      <summary>画像は、コントロールのクライアント四角形全体に引き伸ばされます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageLayout.Zoom">
      <summary>画像は、コントロールのクライアント四角形内に拡大されて表示されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageLayout.TileStretch">
      <summary>画像は、９分割され、コントロールのクライアント四角形内に並べて表示されます。 中央のタイルは引き伸ばされ、隅のタイルは元のサイズでレンダリングされます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.InputImageScaling">
      <summary>入力コンポーネント上の画像の拡大縮小を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageScaling.Clip">
      <summary>画像の元のサイズを使用します。必要に応じて、表示領域でクリッピングします。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageScaling.Stretch">
      <summary>表示領域全体に画像を引き伸ばします。 このモードでは、通常、画像のアスペクト比が変化します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageScaling.Scale">
      <summary>表示領域に合わせて画像を拡大縮小します。 このモードでは、画像のサイズが変化しますが、アスペクト比は維持されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageScaling.Tile">
      <summary>表示領域全体に画像をタイル表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageScaling.TileStretch">
      <summary>画像を３行３列にタイル表示し、表示領域全体に引き伸ばします。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageScaling.TileStretchHorizontal">
      <summary>画像を横に３枚タイル表示し、表示領域全体に引き伸ばします。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputImageScaling.TileStretchVertical">
      <summary>画像を縦に３枚タイル表示し、表示領域全体に引き伸ばします。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.InputNavigatorButton">
      <summary>使用できるすべてのナビゲータボタンのリスト。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.MoveFirst">
      <summary>［最初に移動］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.MovePrevious">
      <summary>［前に移動］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.MoveNext">
      <summary>［次に移動］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.MoveLast">
      <summary>［最後に移動］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.AddNew">
      <summary>［新規追加］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Delete">
      <summary>［削除］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Edit">
      <summary>［編集］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Apply">
      <summary>［適用］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Cancel">
      <summary>［キャンセル］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Save">
      <summary>［データの保存］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Reload">
      <summary>［データの再ロード］ボタン。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.InputNavigatorItems">
      <summary>ナビゲータ項目のセット。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.None">
      <summary>セット内に項目がありません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.MoveFirstButton">
      <summary>［最初に移動］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.MovePreviousButton">
      <summary>［前に移動］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.PositionInputBox">
      <summary>現在の位置を変更するための入力ボックス。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.CountLabel">
      <summary>項目の合計数を表示するテキストラベル。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.MoveNextButton">
      <summary>［次に移動］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.MoveLastButton">
      <summary>［最後に移動］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.AddNewButton">
      <summary>［新規追加］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.DeleteButton">
      <summary>［削除］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.ApplyButton">
      <summary>［適用］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.CancelButton">
      <summary>［キャンセル］ボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.All">
      <summary>選択可能な項目をすべて含みます。</summary>
    </member>
    <member name="T:C1.Win.C1Input.Enums.Visibility">
      <summary>コンポーネントの表示状態を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.Visibility.Visible">
      <summary>コンポーネントを表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.Visibility.Hidden">
      <summary>要素を表示しませんが、レイアウト内に要素のスペースを確保します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.Enums.Visibility.Collapsed">
      <summary>要素を表示せず、レイアウト内にスペースも確保しません。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DropDownItemClickedEventHandler">
      <summary>
        <see cref="T:C1.Win.C1Input.C1SplitButton" />クラスの
        <see cref="E:C1.Win.C1Input.C1SplitButton.DropDownItemClicked" />イベントを処理するメソッドを表します。
      </summary>
      <param name="sender"></param>
      <param name="e"></param>
    </member>
    <member name="T:C1.Win.C1Input.DropDownItemClickedEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Input.C1SplitButton.DropDownItemClicked" />イベントにイベントデータを提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.DropDownItemClickedEventArgs.#ctor(C1.Win.C1Input.DropDownItem)">
      <summary>指定されたコントロールの DropDownItemClickedEventArgs クラスの新しいインスタンスを初期化します。</summary>
      <param name="clickedItem">
        このイベントに格納する
        <see cref="T:C1.Win.C1Input.DropDownItem" />。
      </param>
    </member>
    <member name="P:C1.Win.C1Input.DropDownItemClickedEventArgs.ClickedItem">
      <summary>クリックされた項目を返します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.CalendarType">
      <summary>C1DateEdit で使用するカレンダー。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.Default">
      <summary>デフォルトの暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.ChineseLunisolarCalendar">
      <summary>中国の太陰太陽暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.EastAsianLunisolarCalendar">
      <summary>東アジアの太陰太陽暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.GregorianCalendar">
      <summary>グレゴリオ暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.HebrewCalendar">
      <summary>ヘブライ暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.HijriCalendar">
      <summary>イスラム暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.JapaneseCalendar">
      <summary>日本の暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.JapaneseLunisolarCalendar">
      <summary>日本の太陰太陽暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.JulianCalendar">
      <summary>ユリウス暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.KoreanCalendar">
      <summary>韓国の暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.KoreanLunisolarCalendar">
      <summary>韓国の太陰太陽暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.TaiwanCalendar">
      <summary>台湾の暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.TaiwanLunisolarCalendar">
      <summary>台湾の太陰太陽暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.ThaiBuddhistCalendar">
      <summary>タイ仏暦を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.CalendarType.UmAlQuraCalendar">
      <summary>UmAlQuraCalendar を表します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.UpDownButtonAlignment">
      <summary>
        <see cref="T:C1.Win.C1Input.C1DropDownControl" />のスピンボタンの配置を指定します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Input.UpDownButtonAlignment.Default">
      <summary>垂直方向に積み重ねられたアップ/ダウンボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.UpDownButtonAlignment.UpLeftDownRight">
      <summary>左側のアップボタンと右側のダウンボタン。</summary>
    </member>
    <member name="F:C1.Win.C1Input.UpDownButtonAlignment.UpRightDownLeft">
      <summary>右側のアップボタンと左側のダウンボタン。</summary>
    </member>
    <member name="T:C1.Win.C1Input.DropDownFormOptionsFlags">
      <summary>DropDownForm.Options プロパティによって使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.None">
      <summary>オプションが何も設定されていないことを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.Focusable">
      <summary>DropDownForm がフォーカスを受け取ることができることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.FixedWidth">
      <summary>エンドユーザーは、ドロップダウンフォームの幅をサイズ変更できません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.FixedHeight">
      <summary>エンドユーザーは、ドロップダウンフォームの高さをサイズ変更できません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.AlwaysPostChanges">
      <summary>このフラグが設定された場合、コントロールの Value に対する変更は、［Esc］キーまたは CloseDropDown メソッドを使用して、明示的にのみキャンセルできます。 暗黙的なキャンセル（フォーカスを失ってフォームが閉じられた場合）は無効です。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.NoCancelOnEscape">
      <summary>このフラグが設定された場合は、［Esc］キーを押してもフォームが閉じられません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.NoPostOnEnter">
      <summary>このフラグが設定された場合は、［Enter］キーを押してもフォームが閉じられません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.AutoResize">
      <summary>これが設定された場合は、ドロップダウンフォームの幅が表示前にオーナーコントロールの幅に合わせて 自動的に調整されます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.FixedSize">
      <summary>= FixedWidth + FixedHeight</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1BasePicker">
      <summary>C1ColorPicker コントロールと C1FontPicker コントロールの基本クラス。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1BasePicker.#ctor">
      <summary>C1BasePicker クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1BasePicker.OnParsing(C1.Win.C1Input.ParseEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1BasePicker.OnFormatting(C1.Win.C1Input.FormatEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1BasePicker.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1BasePicker.TextToValue(C1.Win.C1Input.C1BasePicker.TextToValueArgs@)">
      <summary>文字列を値に変換します。派生クラスでオーバーライドする必要があります。</summary>
      <param name="e"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Input.C1BasePicker.ValueToText(C1.Win.C1Input.C1BasePicker.ValueToTextArgs@)">
      <summary>値を文字列に変換します。派生クラスでオーバーライドする必要があります。</summary>
      <param name="e"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Input.C1ColorPicker">
      <summary>追加のビジュアルスタイルをサポートする Windows カラーピッカーコントロールを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.#ctor">
      <summary>C1ColorPicker クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.TextToValue(C1.Win.C1Input.C1BasePicker.TextToValueArgs@)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.ValueToText(C1.Win.C1Input.C1BasePicker.ValueToTextArgs@)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.OnModalButtonClick(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.GetImageSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.DrawImage(System.Drawing.Graphics,System.IntPtr,System.Drawing.Rectangle)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ColorPicker.AllowTransparent">
      <summary>透過色を選択できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ColorPicker.AllowEmpty">
      <summary>空の色を選択できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ColorPicker.EmptyColorCaption">
      <summary>空の色のキャプションを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ColorPicker.DefaultDropDownFormClassName">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ColorPicker.ShowImage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ColorPicker.DefaultThemeRootPath">
      <summary>xml テーマファイルのコントロールのデフォルトのパス。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1ColorPickerDropDownForm">
      <summary>ドロップダウンカラーピッカーフォームを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.#ctor">
      <summary>C1ColorPickerDropDownForm クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.OnPostChanges(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.OnVisibleChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Input.C1FontPicker">
      <summary>追加のビジュアルスタイルをサポートする Windows フォントピッカーコントロールを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPicker.#ctor">
      <summary>C1FontPicker クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPicker.TextToValue(C1.Win.C1Input.C1BasePicker.TextToValueArgs@)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPicker.ValueToText(C1.Win.C1Input.C1BasePicker.ValueToTextArgs@)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="P:C1.Win.C1Input.C1FontPicker.UsedFonts">
      <summary>システムにインストールされているフォントのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1FontPicker.DefaultDropDownFormClassName">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1FontPicker.DefaultThemeRootPath">
      <summary>xml テーマファイルのコントロールのデフォルトのパス。</summary>
    </member>
    <member name="T:C1.Win.C1Input.C1FontPickerDropDownForm">
      <summary>ドロップダウンフォントピッカーフォームを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.#ctor">
      <summary>C1FontPickerDropDownForm クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.OnPostChanges(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.OnVisibleChanged(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.CalendarType">
      <summary>コントロールから CalendarType プロパティが継承されることを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.FormatInfo.CalendarType">
      <summary>日付の書式設定に使用するカレンダー。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1FontPicker.DropDownFormWidth">
      <summary>フォントのドロップダウンリストの幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.MaskInfo.RegexpEditMask">
      <summary>
        マスクを正規表現形式で表す
        <see cref="T:System.String" />。
      </summary>
    </member>
    <member name="T:C1.Win.C1Input.GrapeCity.Editors.KanaMode">
      <summary>日本語文字変換モードを定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.KanaMode.KatakanaHalf">
      <summary>日本語文字モードを半角カタカナモードに変換します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.KanaMode.Katakana">
      <summary>日本語文字モードを全角カタカナモードに変換します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.KanaMode.Hiragana">
      <summary>日本語文字モードをひらがなモードに変換します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode">
      <summary>IME が文をどのように処理するかを決定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.Inherit">
      <summary>親コントロールの IME 変換モードを継承します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.NoControl">
      <summary>IME 変換モードを制御しません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.Normal">
      <summary>語句情報を使用して、次の文字を予測します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.BiasForNames">
      <summary>IME は人名/地名情報を使用して変換処理を実行します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.BiasForSpeech">
      <summary>IME は会話モードを使用します。これは、チャットアプリケーションに役立ちます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.Direct">
      <summary>文に情報はありません。</summary>
    </member>
    <member name="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput">
      <summary>このクラスは、ふりがなの出力動作を制御するために使用されます。</summary>
    </member>
    <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.#ctor(System.Object,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode)">
      <summary>
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="outputTarget">
        ターゲットオブジェクトを示す
        <see cref="T:System.Object" />。
      </param>
      <param name="outputMode">
        出力動作を制御する
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.Equals(System.Object)">
      <summary>このインスタンスと指定されたオブジェクトが等しいかどうかを示します。</summary>
      <param name="obj">比較する別のオブジェクト。</param>
      <returns>
        <b>obj</b>とこのインスタンスが同じタイプで、同じ値を表す場合は
        <see langword="true" />、そうでない場合は
        <see langword="false" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.op_Equality(C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput)">
      <summary>"==" 演算子を宣言します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.op_Inequality(C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput)">
      <summary>"!=" 演算子を宣言します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.GetHashCode">
      <summary>このオブジェクトのハッシュコードを取得します。</summary>
      <returns>
        IME のハッシュコードを示す
        <see cref="T:System.Int32" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.None">
      <summary>空の出力を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.TargetControl">
      <summary>出力の受け取りに使用されるコントロールを取得または設定します。</summary>
      <value>
        ターゲットコントロールを示す
        <see cref="T:System.Windows.Forms.Control" />。
      </value>
    </member>
    <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.Target">
      <summary>出力文字列の受け取りに使用されるオブジェクトを取得または設定します。</summary>
      <value>出力ターゲットを示すオブジェクト。</value>
      <remarks>文字列を受け取るには、出力ターゲットオブジェクトが 'Text' または 'Value' という名前のパブリックプロパティを持つ必要があります。 さらに、1 つの文字列型プロパティが有効である必要があります。</remarks>
    </member>
    <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.OutputMode">
      <summary>出力モードを取得または設定します。</summary>
      <value>
        出力動作を制御する
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode" />。
      </value>
    </member>
    <member name="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode">
      <summary>ふりがなの出力モードを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode.Append">
      <summary>元のテキストの最後に新しいテキストを追加します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode.Replace">
      <summary>ターゲットコントロールのすべてのテキストを置き換えます。</summary>
    </member>
    <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode.Intelligence">
      <summary>ふりがな出力を自動的に維持します。</summary>
    </member>
    <member name="T:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs">
      <summary>
        <b>ResultString</b>イベントの
        <see cref="T:System.EventArgs" />データを提供します。
      </summary>
      <remarks>
        IME 変換ウィンドウで変更があったときに、
        <b>ResultString</b>が発生します。
      </remarks>
    </member>
    <member name="M:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs.#ctor(System.Windows.Forms.Control,System.String)">
      <summary>
        指定されたふりがな文字列で
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="sourceControl">
        ふりがなを作成するソースコントロールを示す
        <see cref="T:System.Windows.Forms.Control" />。
      </param>
      <param name="readString">
        指定されたふりがなを示す
        <b>string</b>。
      </param>
    </member>
    <member name="P:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs.SourceControl">
      <summary>ふりがなを作成するコントロールを取得します。</summary>
      <value>
        ソースコントロールを示す
        <see cref="T:System.Windows.Forms.Control" />。
      </value>
    </member>
    <member name="P:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs.ReadString">
      <summary>ふりがなを取得します。</summary>
      <value>
        ふりがなを示す
        <see cref="T:System.String" />値。
      </value>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ImeSetKanaMode(C1.Win.C1Input.GrapeCity.Editors.KanaMode)">
      <summary>コントロールに関連付けられたかなモード設定を関連付けます。</summary>
      <param name="value">
        変換先のふりがな出力の形式を示す
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.KanaMode" />値。
      </param>
      <remarks>
        このメソッドを使用して、コントロールのかなモードを指定することもできます。 かなモードに関する情報を取得するには、
        <see cref="M:C1.Win.C1Input.C1TextBox.ImeGetKanaMode" />メソッドを使用します。
      </remarks>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ImeGetKanaMode">
      <summary>コントロールに関連付けられたかなモード設定を取得します。</summary>
      <returns>
        変換先のふりがな出力の形式を示す
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.KanaMode" />値。
      </returns>
      <remarks>
        <b>ImeGetKanaMode</b>メソッドを使用して、コントロールの
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.KanaMode" />を取得できます。設定を変更するには、
        <see cref="M:C1.Win.C1Input.C1TextBox.ImeSetKanaMode(C1.Win.C1Input.GrapeCity.Editors.KanaMode)" />メソッドを使用します。
      </remarks>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ImeGetReadingStringOutput">
      <summary>
        コントロールに関連付けられている
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput" />を取得します。
      </summary>
      <returns>
        ふりがなの出力方法を示す
        <see langword="ReadingStringOutput" />値。
      </returns>
      <remarks>
        <b>ImeGetReadingStringOutput</b>メソッドを使用して、コントロールの
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput" />の値を取得できます。設定を変更するには、
        <see cref="M:C1.Win.C1Input.C1TextBox.ImeSetReadingStringOutput(C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput)" />メソッドを使用します。
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <b>コントロール</b>は
        <see langword="null" />です。
      </exception>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.ImeSetReadingStringOutput(C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput)">
      <summary>
        <b>ReadingStringOutPut</b>をコントロールに関連付けます。
      </summary>
      <param name="readingStringOutput">
        ふりがなの出力方法を示す
        <see langword="ReadingStringOutput" />値。
      </param>
      <remarks>
        このメソッドを使用して、コントロールのふりがな出力を指定することもできます。 ふりがな出力に関する情報を取得するには、
        <see cref="M:C1.Win.C1Input.C1TextBox.ImeGetReadingStringOutput" />メソッドを使用します。
      </remarks>
    </member>
    <member name="E:C1.Win.C1Input.C1TextBox.ImeResultString">
      <summary>IME による入力処理で有効な結果文字列がある場合に発生します。</summary>
      <remarks>このイベントは、フォームコントロールへの IME 入力中に結果文字列がある場合に発生します。</remarks>
    </member>
    <member name="T:C1.Win.C1Input.JapaneseEraHelper">
      <summary>AddJapaneseEra 関数を含むヘルパー静的クラス。</summary>
    </member>
    <member name="M:C1.Win.C1Input.JapaneseEraHelper.ClearJapaneseEras">
      <summary>すべての日本の年号をクリアします。</summary>
    </member>
    <member name="M:C1.Win.C1Input.JapaneseEraHelper.AddJapaneseEra(System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.String,System.String)">
      <summary>日本の暦に年号を追加します。</summary>
      <param name="era">年号の数値 ID。</param>
      <param name="startTime">年号の開始日。</param>
      <param name="endTime">年号の終了日。</param>
      <param name="eraName">年号の日本語名。</param>
      <param name="abbreviatedEraName">年号の日本語省略名。</param>
      <param name="englishEraName">英語の年号。オプション。</param>
      <param name="symbolEraName">1 文字のラテン文字による年号。</param>
    </member>
    <member name="M:C1.Win.C1Input.JapaneseEraHelper.ReadErasFromGCConfig(System.String)">
      <summary>GC 構成ファイルから年号情報を読み取ります。</summary>
      <param name="sectionName">セクション名。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPicker.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.Field">
      <summary>
        基本フィールドを定義する
        <b>Field</b>クラスを表します。
      </summary>
      <remarks>このクラスは、1 セグメントのビュー機能を実装します。一部の入力動作はユーザーにも公開されます。 これは、ユーザー向けの最終的なインタフェースです。 フィールドが作成されると、対応する 1 つのセグメントと値モジュールが作成されます。さらに、そのセグメントと値モジュールに対して 構成が実行されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.Field.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.Field" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.Field.Name">
      <summary>オブジェクトの名前を取得または設定します。</summary>
      <value>
        オブジェクトの名前を示す
        <see cref="T:System.String" />値。
        <br />デフォルトは
        <see cref="F:System.String.Empty" />です。
      </value>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnGotFocus(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1RangeSlider.OnLostFocus(System.EventArgs)">
      <summary>これは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="P:C1.Win.C1Input.C1BasePicker.BorderStyle">
      <summary>コントロールの境界線のスタイルを決定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ColorPicker.Color">
      <summary>現在の色を取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.ResetColor">
      <summary>このメソッドは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1ColorPicker.Value">
      <summary>C1Input コントロールの主要な連結可能プロパティです。</summary>
    </member>
    <member name="E:C1.Win.C1Input.C1ColorPicker.ColorChanged">
      <summary>
        <see cref="P:C1.Win.C1Input.C1ColorPicker.Color" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.OnColorChanged(System.EventArgs)">
      <summary>このメソッドは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="E:C1.Win.C1Input.ComboBoxItemList.ListChanged">
      <summary>項目が追加、削除、変更、または移動されたとき、あるいはリスト全体が更新されたときに発生します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.ComboBoxItemList.OnListChanged">
      <summary>
        提供された引数を使用して
        <see cref="E:C1.Win.C1Input.ComboBoxItemList.ListChanged" />イベントを発生させます。
      </summary>
    </member>
    <member name="E:C1.Win.C1Input.C1CheckBox.ValueChanged">
      <summary>Value プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1CheckBox.OnValueChanged(System.EventArgs)">
      <summary>ValueChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="M:C1.Win.C1Input.C1ColorPicker.OnValueChanged(System.EventArgs)">
      <summary>このメソッドは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1FontPicker.OnValueChanged(System.EventArgs)">
      <summary>このメソッドは内部使用専用です。</summary>
      <param name="e"></param>
    </member>
    <member name="M:C1.Win.C1Input.C1CheckBox.OnCheckStateChanged(System.EventArgs)">
      <summary>CheckStateChanged イベントを呼び出します。</summary>
      <param name="e">イベント引数。</param>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.UseItemsBindingSource">
      <summary>
        <see cref="P:C1.Win.C1Input.C1ComboBox.SelectedIndex" />プロパティが
        <see cref="P:System.Windows.Forms.BindingSource.Position" />と同期ずるようにします。
      </summary>
      <remarks>
        <see cref="P:C1.Win.C1Input.C1ComboBox.ItemsDataSource" />値が
        <see cref="T:System.Windows.Forms.BindingSource" />でない場合、
        <see cref="P:C1.Win.C1Input.C1ComboBox.UseItemsBindingSource" />は作用しません。
      </remarks>
    </member>
    <member name="P:C1.Win.C1Input.C1ComboBox.DropDownForm">
      <summary>コントロールに関連付けられているドロップダウンフォームのインスタンスを返します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.SmallChange">
      <summary>小さい間隔で上限つまみあるいは下限つまみが移動されたときに LowerValue プロパティあるいは UpperValue プロパティに対して加算あるいは減算する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.LargeChange">
      <summary>大きい間隔で上限つまみあるいは下限つまみが移動されたときに LowerValue プロパティあるいは UpperValue プロパティに対して加算あるいは減算する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.ScrollBehavior">
      <summary>選択された領域の外側でマウスクリックが実行された際のつまみの移動方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.SelectedAreaColor">
      <summary>選択された領域の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.Padding">
      <summary>つまみ内の余白を取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Input.C1TextBox.SetCultureInfo(System.Globalization.CultureInfo)">
      <summary>カルチャーを設定します。 Sets culture.</summary>
      <param name="cultureInfo">新しいカルチャー。</param>
    </member>
    <member name="T:C1.Win.C1Input.RangeSliderScrollBehavior">
      <summary>選択された領域の外側でマウスクリックが実行された際のつまみの移動方法を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RangeSliderScrollBehavior.None">
      <summary>両方のつまみは移動しません。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RangeSliderScrollBehavior.Thumb">
      <summary>最も近いつまみが大きい間隔に従ってマウス方向に移動します。</summary>
    </member>
    <member name="F:C1.Win.C1Input.RangeSliderScrollBehavior.Range">
      <summary>両方のつまみが大きい間隔に従ってマウス方向に移動します。</summary>
    </member>
  </members>
</doc>